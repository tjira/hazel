#include "../include/integral.h"

int test_integral_nuclear_methane_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/methane.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << -35.60720930916963, -4.67764521956494, 0.00000010319580, 0.00000009733115, 0.00000017957061, -1.21367029055914, -1.21366964559889, -1.21366889576139, -1.21366856729636, -4.67764521956494, -7.08750688613210, 0.00000108698656, 0.00000101613766, 0.00000184986569, -2.99131395595537, -2.99131368508296, -2.99131287606615, -2.99131223545231, 0.00000010319580, 0.00000108698656, -7.04570094819181, 0.00000010698105, -0.00000078111686, -1.27696119818512, -0.49538813766625, -0.80780569677685, 2.58017340299829, 0.00000009733115, 0.00000101613766, 0.00000010698105, -7.04570045695929, 0.00000022371722, -0.38888256952991, -1.98982950805604, 2.24908880794749, 0.12964036924364, 0.00000017957061, 0.00000184986569, -0.00000078111686, 0.00000022371722, -7.04570217133100, -2.25999190957757, 1.63847315222234, 1.08557510427926, -0.46402542007240, -1.21367029055914, -2.99131395595537, -1.27696119818512, -0.38888256952991, -2.25999190957757, -4.98989552185230, -0.93998113799104, -0.93998654363710, -0.93998435538904, -1.21366964559889, -2.99131368508296, -0.49538813766625, -1.98982950805604, 1.63847315222234, -0.93998113799104, -4.98989650742687, -0.93999166485300, -0.93999116724425, -1.21366889576139, -2.99131287606615, -0.80780569677685, 2.24908880794749, 1.08557510427926, -0.93998654363710, -0.93999166485300, -4.98989657027990, -0.93999102131352, -1.21366856729636, -2.99131223545231, 2.58017340299829, 0.12964036924364, -0.46402542007240, -0.93998435538904, -0.93999116724425, -0.93999102131352, -4.98989597045153;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
