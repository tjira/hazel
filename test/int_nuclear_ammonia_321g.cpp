#include "../include/integral.h"

int test_int_nuclear_ammonia_321g(int, char**) {
    // initialize the system
    System system("../example/molecule/ammonia.xyz", "3-21G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -48.85978955963476, -3.39268820293793, -0.01324119983615, -0.01648469314208, 0.01068697312413, -5.18738204091471, -0.00194718055050, -0.00242415145640, 0.00157156953060, -0.50810600736988, -1.89825736017410, -0.50810657124759, -1.89825784895769, -0.50810649038525, -1.89825777885181, -3.39268820293793, -10.36439100394674, -0.09069747071079, -0.11291423687496, 0.07320193349401, -7.15179154579165, -0.05603884367036, -0.06976581921934, 0.04522895243522, -1.40974968621040, -3.09381297055952, -1.40975065287704, -3.09381359637015, -1.40975049948951, -3.09381349143705, -0.01324119983615, -0.09069747071079, -11.18606748645681, 0.02054182775172, -0.01331727542686, -0.08706976123937, -4.22847106032960, 0.01883261381186, -0.01220919329996, -0.61709985962337, -0.45944819610667, -1.53773354500853, -1.09908172744909, 0.85485815592422, 0.56323247612134, -0.01648469314208, -0.11291423687496, 0.02054182775172, -11.17699388138905, -0.01657924560170, -0.10839790432943, 0.01883261381186, -4.22015244001327, -0.01519974717819, -1.34172156086962, -0.97041848807153, 0.64262394604414, 0.40825665513830, -0.91931243566272, -0.67693856335174, 0.01068697312413, 0.07320193349401, -0.01331727542686, -0.01657924560170, -11.19181873005924, 0.07027400714936, -0.01220919329996, -0.01519974717819, -4.23374376486211, -1.11542879840936, -0.75019333647488, 0.80475096838450, 0.58390089650550, 1.35988811001523, 0.96959667142352, -5.18738204091471, -7.15179154579165, -0.08706976123937, -0.10839790432943, 0.07027400714936, -7.42391124256341, -0.13151315702528, -0.16372793253139, 0.10614424886838, -2.26102577671610, -4.06307430672237, -2.26102652643078, -4.06307478257030, -2.26102638543410, -4.06307466915497, -0.00194718055050, -0.05603884367036, -4.22847106032960, 0.01883261381186, -0.01220919329996, -0.13151315702528, -5.34682044109746, 0.05034705344978, -0.03264004546248, -1.04738934608544, -0.89034367001805, -2.61386178930322, -2.13311025990929, 1.45717127390697, 1.09665899531714, -0.00242415145640, -0.06976581921934, 0.01883261381186, -4.22015244001327, -0.01519974717819, -0.16372793253139, 0.05034705344978, -5.32458148728906, -0.04063499421053, -2.27970439471684, -1.88255418067388, 1.09669218497395, 0.79612279823291, -1.56096759758969, -1.31234150449054, 0.00157156953060, 0.04522895243522, -0.01220919329996, -0.01519974717819, -4.23374376486211, 0.10614424886838, -0.03264004546248, -0.04063499421053, -5.36091649700447, -1.90003244258927, -1.45946160378878, 1.36718492895460, 1.13259739159424, 2.31175977583109, 1.88197941672121, -0.50810600736988, -1.40974968621040, -0.61709985962337, -1.34172156086962, -1.11542879840936, -2.26102577671610, -1.04738934608544, -2.27970439471684, -1.90003244258927, -5.95697873836082, -3.50714598987935, -0.12186622992639, -0.95641850609404, -0.12186618556063, -0.95641838152793, -1.89825736017410, -3.09381297055952, -0.45944819610667, -0.97041848807153, -0.75019333647488, -4.06307430672237, -0.89034367001805, -1.88255418067388, -1.45946160378878, -3.50714598987935, -4.57440974208313, -0.95641854863777, -2.30077969922856, -0.95641840666761, -2.30077952296749, -0.50810657124759, -1.40975065287704, -1.53773354500853, 0.64262394604414, 0.80475096838450, -2.26102652643078, -2.61386178930322, 1.09669218497395, 1.36718492895460, -0.12186622992639, -0.95641854863777, -5.95697888902823, -3.50714606729683, -0.12186485002764, -0.95641453479566, -1.89825784895769, -3.09381359637015, -1.09908172744909, 0.40825665513830, 0.58390089650550, -4.06307478257030, -2.13311025990929, 0.79612279823291, 1.13259739159424, -0.95641850609404, -2.30077969922856, -3.50714606729683, -4.57440964755674, -0.95641451739167, -2.30077451006241, -0.50810649038525, -1.40975049948951, 0.85485815592422, -0.91931243566272, 1.35988811001523, -2.26102638543410, 1.45717127390697, -1.56096759758969, 2.31175977583109, -0.12186618556063, -0.95641840666761, -0.12186485002764, -0.95641451739167, -5.95697877745661, -3.50714599808164, -1.89825777885181, -3.09381349143705, 0.56323247612134, -0.67693856335174, 0.96959667142352, -4.06307466915497, 1.09665899531714, -1.31234150449054, 1.88197941672121, -0.95641838152793, -2.30077952296749, -0.95641453479566, -2.30077451006241, -3.50714599808164, -4.57440957755025;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
