#include "../include/integral.h"

int test_integral_kinetic_water_631g(int, char**) {
    // initialize the system
    System system("../example/molecule/water.xyz", "6-31G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 29.54014709713746, -2.18540375982758, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.13128251236952, 0.00000000000000, -0.00000000000000, -0.00000000000000, -0.02353053250657, 0.01996166586982, -0.02353058790425, 0.01996159265608, -2.18540375982758, 1.71121112543917, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.48004786990615, -0.00000000000000, -0.00000000000000, -0.00000000000000, 0.00310987807222, 0.10363739531739, 0.00310905287297, 0.10363707624012, 0.00000000000000, 0.00000000000000, 4.25187686617585, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.54724330534162, -0.00000000000000, 0.00000000000000, 0.13259525246346, 0.05885559193408, 0.08152301996283, 0.03618626243517, 0.00000000000000, 0.00000000000000, 0.00000000000000, 4.25187686617585, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.54724330534162, 0.00000000000000, -0.09556573685918, -0.04241915081397, 0.16974507603301, 0.07534607858257, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 4.25187686617585, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54724330534162, 0.09388120243374, 0.04167142969349, -0.00824231255372, -0.00365857993580, 0.13128251236952, 0.48004786990615, -0.00000000000000, -0.00000000000000, -0.00000000000000, 0.40500873390000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.12987348639058, 0.15492112439286, 0.12987284198233, 0.15492079429030, 0.00000000000000, -0.00000000000000, 0.54724330534162, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.67501455650000, 0.00000000000000, 0.00000000000000, 0.28935511813595, 0.14822401530270, 0.17790439804364, 0.09113283481452, -0.00000000000000, -0.00000000000000, -0.00000000000000, 0.54724330534162, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.67501455650000, 0.00000000000000, -0.20854770110458, -0.10682989759782, 0.37042783236308, 0.18975437835529, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54724330534162, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.67501455650000, 0.20487163692716, 0.10494681014321, -0.01798686621308, -0.00921390435230, -0.02353053250657, 0.00310987807222, 0.13259525246346, -0.09556573685918, 0.09388120243374, 0.12987348639058, 0.28935511813595, -0.20854770110458, 0.20487163692716, 1.39567838062028, 0.25973499598884, -0.04533491904691, 0.02471998848966, 0.01996166586982, 0.10363739531739, 0.05885559193408, -0.04241915081397, 0.04167142969349, 0.15492112439286, 0.14822401530270, -0.10682989759782, 0.10494681014321, 0.25973499598884, 0.24191663820000, 0.02471998848966, 0.06971835628977, -0.02353058790425, 0.00310905287297, 0.08152301996283, 0.16974507603301, -0.00824231255372, 0.12987284198233, 0.17790439804364, 0.37042783236308, -0.01798686621308, -0.04533491904691, 0.02471998848966, 1.39567838062028, 0.25973499598884, 0.01996159265608, 0.10363707624012, 0.03618626243517, 0.07534607858257, -0.00365857993580, 0.15492079429030, 0.09113283481452, 0.18975437835529, -0.00921390435230, 0.02471998848966, 0.06971835628977, 0.25973499598884, 0.24191663820000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
