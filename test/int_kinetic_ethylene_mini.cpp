#include "../include/integral.h"

int test_int_kinetic_ethylene_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/ethylene.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix T = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Texp(system.shells.nbf(), system.shells.nbf()); Texp << 16.19074006781007, -0.48698724806222, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000900467882, -0.00743588708142, -0.01126147143427, -0.00015623762541, -0.00298296077278, -0.00314968691716, -0.00314972542120, -0.00255686481511, -0.00255686768683, -0.48698724806222, 0.44072788591624, -0.00000000000000, 0.00000000000000, -0.00000000000000, -0.00743588708142, 0.07339878677198, -0.19235080045124, -0.00266860618386, -0.05095025953829, 0.12052354834587, 0.12052318761067, -0.00497763109877, -0.00497793791581, 0.00000000000000, -0.00000000000000, 1.23814483672461, 0.00000000000000, 0.00000000000000, 0.01126147143427, 0.19235080045124, -0.24193591780204, -0.00526278816833, -0.10047957795119, -0.11494288874951, -0.13613652529360, 0.02772704807755, 0.02632984446666, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.23814483672461, -0.00000000000000, 0.00015623762541, 0.00266860618386, -0.00526278816833, 0.13732823784177, -0.00139401771369, -0.20581242422275, 0.20233848974603, -0.01307390143952, 0.01382400051221, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 1.23814483672461, 0.00298296077278, 0.05095025953829, -0.10047957795119, -0.00139401771369, 0.11078602302445, -0.06260636800588, -0.00399092398957, 0.00522494642932, 0.00908768515856, -0.00000900467882, -0.00743588708142, 0.01126147143427, 0.00015623762541, 0.00298296077278, 16.19074006781007, -0.48698724806222, 0.00000000000000, -0.00000000000000, -0.00000000000000, -0.00255686377305, -0.00255686785204, -0.00314973002167, -0.00314968846957, -0.00743588708142, 0.07339878677198, 0.19235080045124, 0.00266860618386, 0.05095025953829, -0.48698724806222, 0.44072788591624, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00497751978976, -0.00497795557017, 0.12052314450964, 0.12052353380180, -0.01126147143427, -0.19235080045124, -0.24193591780204, -0.00526278816833, -0.10047957795119, 0.00000000000000, 0.00000000000000, 1.23814483672461, 0.00000000000000, -0.00000000000000, -0.02632945540940, -0.02772468041086, 0.13615487464610, 0.11497022492433, -0.00015623762541, -0.00266860618386, -0.00526278816833, 0.13732823784177, -0.00139401771369, -0.00000000000000, -0.00000000000000, 0.00000000000000, 1.23814483672461, 0.00000000000000, -0.01382407480958, 0.01307405955077, -0.20232774963389, 0.20582253119484, -0.00298296077278, -0.05095025953829, -0.10047957795119, -0.00139401771369, 0.11078602302445, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 1.23814483672461, -0.00909367888462, -0.00523038827467, 0.00390504316444, 0.06252281640719, -0.00314968691716, 0.12052354834587, -0.11494288874951, -0.20581242422275, -0.06260636800588, -0.00255686377305, -0.00497751978976, -0.02632945540940, -0.01382407480958, -0.00909367888462, 0.49698730092503, 0.01017634028821, -0.00966297534718, -0.00905135718660, -0.00314972542120, 0.12052318761067, -0.13613652529360, 0.20233848974603, -0.00399092398957, -0.00255686785204, -0.00497795557017, -0.02772468041086, 0.01307405955077, -0.00523038827467, 0.01017634028821, 0.49698730092503, -0.00905132940883, -0.00966336244012, -0.00255686481511, -0.00497763109877, 0.02772704807755, -0.01307390143952, 0.00522494642932, -0.00314973002167, 0.12052314450964, 0.13615487464610, -0.20232774963389, 0.00390504316444, -0.00966297534718, -0.00905132940883, 0.49698730092503, 0.01017651487152, -0.00255686768683, -0.00497793791581, 0.02632984446666, 0.01382400051221, 0.00908768515856, -0.00314968846957, 0.12052353380180, 0.11497022492433, 0.20582253119484, 0.06252281640719, -0.00905135718660, -0.00966336244012, 0.01017651487152, 0.49698730092503;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED KINETIC: " << T << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED KINETIC NORM: " << T.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED KINETIC: " << Texp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED KINETIC NORM: " << Texp.norm() << std::endl;

    // return success or failure based on the error
    return (T - Texp).norm() > 1e-8;
}
