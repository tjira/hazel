#include "../include/integral.h"

int test_int_nuclear_ethane_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/ethane.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -38.29163917453721, -3.81728641590253, -0.03619800707908, 0.00108259044897, 0.00100518261401, -0.00000000427196, -0.64212496172812, 1.38290014970449, -0.04135883783985, -0.03840106385483, -0.19024406489188, -0.19024435039506, -0.19024555320505, -1.53765207918459, -1.53765219705959, -1.53765353772637, -3.81728641590253, -8.98117727860133, -0.58606394730960, 0.01752768786060, 0.01627430907650, -0.64212496472566, -3.18877132565165, 3.81143048694822, -0.11398955181951, -0.10583759104691, -1.25496356176130, -1.25496477770552, -1.25496996665686, -4.51135364288354, -4.51135354769812, -4.51135626406470, -0.03619800707908, -0.58606394730960, -9.05786953714101, 0.01110121326950, 0.01030721820228, -1.38290015612321, -3.81143049189802, 2.90036206670775, -0.14487135147365, -0.13451088159055, -1.57646440634998, -1.56435484608024, -1.53020068502788, 1.03724790454873, 0.87070678264822, 1.09621719934535, 0.00108259044897, 0.01752768786060, 0.01110121326950, -8.68702032476254, -0.00030819469180, 0.04135883963327, 0.11398977685784, -0.14487163149271, -1.93932129951224, 0.00402285423820, 0.02621138232219, -0.53115550402795, 0.64464519715375, 2.78651198706070, -2.94471470210688, 0.06835599676432, 0.00100518261401, 0.01627430907650, 0.01030721820228, -0.00030819469180, -8.68697466517007, 0.03840106594344, 0.10583781813485, -0.13451116384603, 0.00402285490399, -1.93991883954078, -0.63563549234237, 0.40078894702294, 0.36455717087716, -1.76985000304604, -1.59481137455573, 3.28124117547394, -0.00000000427196, -0.64212496472566, -1.38290015612321, 0.04135883963327, 0.03840106594344, -38.29163928929924, -3.81728643799950, 0.03619800403452, -0.00108254372764, -0.00100512315680, -1.53765167189164, -1.53765199878470, -1.53765489996600, -0.19024473554532, -0.19024438768492, -0.19024484701109, -0.64212496172812, -3.18877132565165, -3.81143049189802, 0.11398977685784, 0.10583781813485, -3.81728643799950, -8.98117736860998, 0.58606391452990, -0.01752718187505, -0.01627367010931, -4.51135239064104, -4.51135324295530, -4.51135920621082, -1.25496637520789, -1.25496491089629, -1.25496695962823, 1.38290014970449, 3.81143048694822, 2.90036206670775, -0.14487163149271, -0.13451116384603, 0.03619800403452, 0.58606391452990, -9.05786966126472, 0.01110084972459, 0.01030701469445, -1.09624924307241, -1.03721621690135, -0.87070704693141, 1.56436351441326, 1.53019426874651, 1.57646215143908, -0.04135883783985, -0.11398955181951, -0.14487135147365, -1.93932129951224, 0.00402285490399, -0.00108254372764, -0.01752718187505, 0.01110084972459, -8.68702044554193, -0.00030835245097, -0.06926147604623, -2.78603275643804, 2.94514826382175, 0.53125526459898, -0.64455360052851, -0.02639842949356, -0.03840106385483, -0.10583759104691, -0.13451088159055, 0.00402285423820, -1.93991883954078, -0.00100512315680, -0.01627367010931, 0.01030701469445, -0.00030835245097, -8.68697466474023, -3.28120916530295, 1.77062185959283, 1.59401737654736, -0.40063003167693, -0.36471998432161, 0.63564338092784, -0.19024406489188, -1.25496356176130, -1.57646440634998, 0.02621138232219, -0.63563549234237, -1.53765167189164, -4.51135239064104, -1.09624924307241, -0.06926147604623, -3.28120916530295, -6.42425175811544, -1.96452553573886, -1.96452716063071, -0.67757104374002, -0.67774629334044, -0.31344366214295, -0.19024435039506, -1.25496477770552, -1.56435484608024, -0.53115550402795, 0.40078894702294, -1.53765199878470, -4.51135324295530, -1.03721621690135, -2.78603275643804, 1.77062185959283, -1.96452553573886, -6.42425268096103, -1.96452875776283, -0.31344373779086, -0.67757037720253, -0.67774874074649, -0.19024555320505, -1.25496996665686, -1.53020068502788, 0.64464519715375, 0.36455717087716, -1.53765489996600, -4.51135920621082, -0.87070704693141, 2.94514826382175, 1.59401737654736, -1.96452716063071, -1.96452875776283, -6.42425730254833, -0.67775101633988, -0.31344474427657, -0.67757501500194, -1.53765207918459, -4.51135364288354, 1.03724790454873, 2.78651198706070, -1.76985000304604, -0.19024473554532, -1.25496637520789, 1.56436351441326, 0.53125526459898, -0.40063003167693, -0.67757104374002, -0.31344373779086, -0.67775101633988, -6.42425339537168, -1.96452626545515, -1.96452598129486, -1.53765219705959, -4.51135354769812, 0.87070678264822, -2.94471470210688, -1.59481137455573, -0.19024438768492, -1.25496491089629, 1.53019426874651, -0.64455360052851, -0.36471998432161, -0.67774629334044, -0.67757037720253, -0.31344474427657, -1.96452626545515, -6.42425277449438, -1.96452768060229, -1.53765353772637, -4.51135626406470, 1.09621719934535, 0.06835599676432, 3.28124117547394, -0.19024484701109, -1.25496695962823, 1.57646215143908, -0.02639842949356, 0.63564338092784, -0.31344366214295, -0.67774874074649, -0.67757501500194, -1.96452598129486, -1.96452768060229, -6.42425483892162;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
