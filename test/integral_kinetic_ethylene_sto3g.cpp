#include "../include/integral.h"

int test_integral_kinetic_ethylene_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/ethylene.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 15.89112181239595, -0.08588999412233, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00013962331872, -0.00811370955331, 0.00775992214381, 0.00010765838338, 0.00205546348805, -0.01022864181614, -0.01022869198017, -0.00248431502319, -0.00248428823622, -0.08588999412233, 0.47224999256911, 0.00000000000000, 0.00000000000000, -0.00000000000000, -0.00811370955331, 0.06591567146109, -0.17864145057220, -0.00247840756873, -0.04731889989331, 0.10951014626345, 0.10950971519263, -0.01454443174227, -0.01454452465318, 0.00000000000000, 0.00000000000000, 1.47772809059759, 0.00000000000000, 0.00000000000000, -0.00775992214381, 0.17864145057220, -0.33589497549169, -0.00609083908491, -0.11628910779707, -0.12542853953159, -0.14855540320533, 0.00201500784704, 0.00191309127299, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.47772809059759, 0.00000000000000, -0.00010765838338, 0.00247840756873, -0.00609083908491, 0.10304287813520, -0.00161335347425, -0.22458763711753, 0.22079655598196, -0.00095011967803, 0.00100443338247, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.47772809059759, -0.00205546348805, 0.04731889989331, -0.11628910779707, -0.00161335347425, 0.07232449194170, -0.06831762616883, -0.00435499085315, 0.00037971254733, 0.00066029904546, -0.00013962331872, -0.00811370955331, -0.00775992214381, -0.00010765838338, -0.00205546348805, 15.89112181239595, -0.08588999412233, -0.00000000000000, 0.00000000000000, -0.00000000000000, -0.00248432474099, -0.00248428669487, -0.01022869797378, -0.01022864383866, -0.00811370955331, 0.06591567146109, 0.17864145057220, 0.00247840756873, 0.04731889989331, -0.08588999412233, 0.47224999256911, 0.00000000000000, 0.00000000000000, -0.00000000000000, -0.01454439803388, -0.01454452999911, 0.10950966368785, 0.10951012888359, 0.00775992214381, -0.17864145057220, -0.33589497549169, -0.00609083908491, -0.11628910779707, -0.00000000000000, 0.00000000000000, 1.47772809059759, -0.00000000000000, -0.00000000000000, -0.00191357756798, -0.00201441530804, 0.14857540736547, 0.12545836400663, 0.00010765838338, -0.00247840756873, -0.00609083908491, 0.10304287813520, -0.00161335347425, 0.00000000000000, 0.00000000000000, -0.00000000000000, 1.47772809059759, -0.00000000000000, -0.00100470894830, 0.00094993288676, -0.22078480775168, 0.22459865635996, 0.00205546348805, -0.04731889989331, -0.11628910779707, -0.00161335347425, 0.07232449194170, -0.00000000000000, -0.00000000000000, -0.00000000000000, -0.00000000000000, 1.47772809059759, -0.00066091226170, -0.00038002869831, 0.00426127511369, 0.06822644962811, -0.01022864181614, 0.10951014626345, -0.12542853953159, -0.22458763711753, -0.06831762616883, -0.00248432474099, -0.01454439803388, -0.00191357756798, -0.00100470894830, -0.00066091226170, 0.76003187992239, -0.00703346651609, -0.01089598326096, -0.00608642515394, -0.01022869198017, 0.10950971519263, -0.14855540320533, 0.22079655598196, -0.00435499085315, -0.00248428669487, -0.01454452999911, -0.00201441530804, 0.00094993288676, -0.00038002869831, -0.00703346651609, 0.76003187992239, -0.00608639238537, -0.01089576906158, -0.00248431502319, -0.01454443174227, 0.00201500784704, -0.00095011967803, 0.00037971254733, -0.01022869797378, 0.10950966368785, 0.14857540736547, -0.22078480775168, 0.00426127511369, -0.01089598326096, -0.00608639238537, 0.76003187992239, -0.00703339235517, -0.00248428823622, -0.01454452465318, 0.00191309127299, 0.00100443338247, 0.00066029904546, -0.01022864383866, 0.10951012888359, 0.12545836400663, 0.22459865635996, 0.06822644962811, -0.00608642515394, -0.01089576906158, -0.00703339235517, 0.76003187992239;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
