#include "../include/integral.h"

int test_int_kinetic_ammonia_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/ammonia.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix T = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Texp(system.shells.nbf(), system.shells.nbf()); Texp << 22.40032942508149, -0.68882608776301, 0.00000000000000, -0.00000000000000, -0.00000000000000, -0.00196584947733, -0.00196584252233, -0.00196584351301, -0.68882608776301, 0.62960176175531, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.12228387091126, 0.12228393472191, 0.12228392563259, 0.00000000000000, -0.00000000000000, 1.85258705720454, 0.00000000000000, 0.00000000000000, 0.08131405128639, 0.20420820345982, -0.11517569715752, -0.00000000000000, -0.00000000000000, 0.00000000000000, 1.85258705720454, 0.00000000000000, 0.17778277020537, -0.08710492626015, 0.12139589705413, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.85258705720454, 0.14975413682816, -0.10656815877633, -0.18067268775270, -0.00196584947733, 0.12228387091126, 0.08131405128639, 0.17778277020537, 0.14975413682816, 0.49698730092503, 0.02502429792745, 0.02502429089185, -0.00196584252233, 0.12228393472191, 0.20420820345982, -0.08710492626015, -0.10656815877633, 0.02502429792745, 0.49698730092503, 0.02502406174199, -0.00196584351301, 0.12228392563259, -0.11517569715752, 0.12139589705413, -0.18067268775270, 0.02502429089185, 0.02502406174199, 0.49698730092503;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED KINETIC: " << T << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED KINETIC NORM: " << T.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED KINETIC: " << Texp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED KINETIC NORM: " << Texp.norm() << std::endl;

    // return success or failure based on the error
    return (T - Texp).norm() > 1e-8;
}
