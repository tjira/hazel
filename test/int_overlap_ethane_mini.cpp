#include "../include/integral.h"

int test_int_overlap_ethane_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/ethane.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix S = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Sexp(system.shells.nbf(), system.shells.nbf()); Sexp << 1.00000000000000, 0.19254595363088, -0.00000000000000, -0.00000000000000, -0.00000000000000, 0.00000000041373, 0.02871111767543, -0.06108327602169, 0.00182683711696, 0.00169619102216, 0.00851703033598, 0.00851704301301, 0.00851709644164, 0.06857628595702, 0.06857629136933, 0.06857635044131, 0.19254595363088, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.02871111767543, 0.35880713994853, -0.41508924143377, 0.01241420700541, 0.01152640608969, 0.15640717521109, 0.15640732281262, 0.15640794489373, 0.57864714204385, 0.57864716485525, 0.57864741382726, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.06108327602169, 0.41508924143377, -0.29974225682770, 0.01663472158207, 0.01544509093979, 0.19251582595686, 0.19072822442502, 0.18568633058482, -0.18376454589738, -0.16000994617736, -0.19217562182269, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, -0.00182683711696, -0.01241420700541, 0.01663472158207, 0.25596926728190, -0.00046192128585, -0.00266715587957, 0.07960975739597, -0.09395824805143, -0.39638271165807, 0.42109038696036, -0.00867880917841, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, -0.00169619102216, -0.01152640608969, 0.01544509093979, -0.00046192128585, 0.25603788020676, 0.09494674533961, -0.05804690940399, -0.05269864978376, 0.25343704030482, 0.22847035998772, -0.46702492555513, 0.00000000041373, 0.02871111767543, 0.06108327602169, -0.00182683711696, -0.00169619102216, 1.00000000000000, 0.19254595363088, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.06857626800281, 0.06857628224638, 0.06857640997759, 0.00851706008204, 0.00851704464894, 0.00851706502050, 0.02871111767543, 0.35880713994853, 0.41508924143377, -0.01241420700541, -0.01152640608969, 0.19254595363088, 1.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.57864706637176, 0.57864712640453, 0.57864766475600, 0.15640752155120, 0.15640734186015, 0.15640757905079, -0.06108327602169, -0.41508924143377, -0.29974225682770, 0.01663472158207, 0.01544509093979, 0.00000000000000, 0.00000000000000, 1.00000000000000, -0.00000000000000, -0.00000000000000, 0.19218017279848, 0.18376000853665, 0.16001001803650, -0.19072946182405, -0.18568554046166, -0.19251539224168, 0.00182683711696, 0.01241420700541, 0.01663472158207, 0.25596926728190, -0.00046192128585, -0.00000000000000, 0.00000000000000, -0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00880789891801, 0.39631445384487, -0.42115198403739, -0.07962436213713, 0.09394485966486, 0.00269457405959, 0.00169619102216, 0.01152640608969, 0.01544509093979, -0.00046192128585, 0.25603788020676, -0.00000000000000, -0.00000000000000, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.46702053123753, -0.25354704564723, -0.22835705297776, 0.05802363450185, 0.05272253188843, -0.09494787847372, 0.00851703033598, 0.15640717521109, 0.19251582595686, -0.00266715587957, 0.09494674533961, 0.06857626800281, 0.57864706637176, 0.19218017279848, 0.00880789891801, 0.46702053123753, 1.00000000000000, 0.28047773267419, 0.28047785650716, 0.09765464540354, 0.09768413330986, 0.03825740204304, 0.00851704301301, 0.15640732281262, 0.19072822442502, 0.07960975739597, -0.05804690940399, 0.06857628224638, 0.57864712640453, 0.18376000853665, 0.39631445384487, -0.25354704564723, 0.28047773267419, 1.00000000000000, 0.28047808822495, 0.03825741178242, 0.09765453634142, 0.09768448883145, 0.00851709644164, 0.15640794489373, 0.18568633058482, -0.09395824805143, -0.05269864978376, 0.06857640997759, 0.57864766475600, 0.16001001803650, -0.42115198403739, -0.22835705297776, 0.28047785650716, 0.28047808822495, 1.00000000000000, 0.09768480355929, 0.03825753332429, 0.09765519549425, 0.06857628595702, 0.57864714204385, -0.18376454589738, -0.39638271165807, 0.25343704030482, 0.00851706008204, 0.15640752155120, -0.19072946182405, -0.07962436213713, 0.05802363450185, 0.09765464540354, 0.03825741178242, 0.09768480355929, 1.00000000000000, 0.28047780072074, 0.28047769233583, 0.06857629136933, 0.57864716485525, -0.16000994617736, 0.42109038696036, 0.22847035998772, 0.00851704464894, 0.15640734186015, -0.18568554046166, 0.09394485966486, 0.05272253188843, 0.09768413330986, 0.09765453634142, 0.03825753332429, 0.28047780072074, 1.00000000000000, 0.28047798419319, 0.06857635044131, 0.57864741382726, -0.19217562182269, -0.00867880917841, -0.46702492555513, 0.00851706502050, 0.15640757905079, -0.19251539224168, 0.00269457405959, -0.09494787847372, 0.03825740204304, 0.09768448883145, 0.09765519549425, 0.28047769233583, 0.28047798419319, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP: " << S << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP NORM: " << S.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP: " << Sexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP NORM: " << Sexp.norm() << std::endl;

    // return success or failure based on the error
    return (S - Sexp).norm() > 1e-8;
}
