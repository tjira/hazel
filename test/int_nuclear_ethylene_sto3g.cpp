#include "../include/integral.h"

int test_int_nuclear_ethylene_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/ethylene.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -37.56776510722129, -5.16457355939292, -0.05870934958914, -0.00081524013148, -0.01554375441402, -0.00004726463323, -0.99602297566211, 1.60208853886692, 0.02222677611210, 0.42436467696982, -1.33753582088552, -1.33753150209669, -0.13363374902170, -0.13363023088798, -5.16457355939292, -9.05144274832433, -0.66765553523016, -0.00927041865232, -0.17677441160688, -0.99602298475753, -3.79879812619888, 3.89652872362757, 0.05405741016819, 1.03214040693640, -3.77254349231220, -3.77253036365720, -0.89052859705719, -0.89051243702728, -0.05870934958914, -0.66765553523016, -9.32444600083009, 0.00164499875337, -0.15545383513622, -1.60208870305449, -3.89653870514139, 3.04179744010092, 0.07134056337782, 1.33156285094023, 1.39754951144584, 1.68802719374625, -1.02678428822879, -0.98392537877416, -0.00081524013148, -0.00927041865232, 0.00164499875337, -8.92174825267500, -0.02944005780724, -0.02222683622513, -0.05406075630558, 0.07134375399507, -2.01426744606560, 0.01400984822146, 2.81835974962080, -2.77568261207557, 0.39871568982322, -0.42662326303310, -0.01554375441402, -0.17677441160688, -0.15545383513622, -0.02944005780724, -8.77726050452991, -0.42436411345867, -1.03210265884001, 1.33152254361036, 0.01400844387500, -1.63217328320886, 0.81098513482109, 0.00761290041806, -0.20694041013248, -0.32546865437840, -0.00004726463323, -0.99602298475753, -1.60208870305449, -0.02222683622513, -0.42436411345867, -37.56776540203312, -5.16457363261311, 0.05870569991829, 0.00081364095668, 0.01555735949135, -0.13363502546187, -0.13363002985301, -1.33753117969483, -1.33753549876329, -0.99602297566211, -3.79879812619888, -3.89653870514139, -0.05406075630558, -1.03210265884001, -5.16457363261311, -9.05144305857625, 0.66761775672023, 0.00925396207288, 0.17691528487595, -0.89053471577665, -0.89051121993384, -3.77253487237312, -3.77253738076751, 1.60208853886692, 3.89652872362757, 3.04179744010092, 0.07134375399507, 1.33152254361036, 0.05870569991829, 0.66761775672023, -9.32446674274119, 0.00163577910801, -0.15541869116361, 0.98389495049350, 1.02672375102424, -1.68828874611070, -1.39793442365754, 0.02222677611210, 0.05405741016819, 0.07134056337782, -2.01426744606560, 0.01400844387500, 0.00081364095668, 0.00925396207288, 0.00163577910801, -8.92174820969383, -0.02944187403998, 0.42661507277184, -0.39872833365889, 2.77553497059179, -2.81849850244620, 0.42436467696982, 1.03214040693640, 1.33156285094023, 0.01400984822146, -1.63217328320886, 0.01555735949135, 0.17691528487595, -0.15541869116361, -0.02944187403998, -8.77724073400598, 0.32565284886938, 0.20711612969260, -0.00639952608646, -0.80980369959318, -1.33753582088552, -3.77254349231220, 1.39754951144584, 2.81835974962080, 0.81098513482109, -0.13363502546187, -0.89053471577665, 0.98389495049350, 0.42661507277184, 0.32565284886938, -6.28898827877538, -1.07663112266926, -0.35546299593275, -0.12971405677287, -1.33753150209669, -3.77253036365720, 1.68802719374625, -2.77568261207557, 0.00761290041806, -0.13363002985301, -0.89051121993384, 1.02672375102424, -0.39872833365889, 0.20711612969260, -1.07663112266926, -6.28897052566205, -0.12971293216038, -0.35543707271903, -0.13363374902170, -0.89052859705719, -1.02678428822879, 0.39871568982322, -0.20694041013248, -1.33753117969483, -3.77253487237312, -1.68828874611070, 2.77553497059179, -0.00639952608646, -0.35546299593275, -0.12971293216038, -6.28898225348284, -1.07663525761505, -0.13363023088798, -0.89051243702728, -0.98392537877416, -0.42662326303310, -0.32546865437840, -1.33753549876329, -3.77253738076751, -1.39793442365754, -2.81849850244620, -0.80980369959318, -0.12971405677287, -0.35543707271903, -1.07663525761505, -6.28897463110429;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
