#include "../include/integral.h"

int test_integral_kinetic_formaldehyde_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/formaldehyde.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 29.55420198324335, -0.93007909770272, 0.00000000000000, -0.00000000000000, -0.00000000000000, -0.00000187867431, -0.00402959377204, -0.00704132201191, -0.00017813841632, -0.00081074132419, -0.00162876006056, -0.00162875968078, -0.93007909770272, 0.85977235460205, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.01811080643016, 0.06579128490855, -0.22404700700679, -0.00566816557212, -0.02579688399897, -0.01085000166191, -0.01084999290251, 0.00000000000000, 0.00000000000000, 2.50867322208213, -0.00000000000000, -0.00000000000000, 0.01610737632548, 0.18129561212668, -0.31218847445018, -0.01117820973554, -0.05087412782758, 0.00615428160024, 0.00687766774479, -0.00000000000000, 0.00000000000000, -0.00000000000000, 2.50867322208213, -0.00000000000000, 0.00040750053824, 0.00458659796782, -0.01117820973554, 0.12937263730420, -0.00128706463753, -0.00045217453512, 0.00078187335177, -0.00000000000000, 0.00000000000000, -0.00000000000000, -0.00000000000000, 2.50867322208213, 0.00185461133423, 0.02087446709525, -0.05087412782758, -0.00128706463753, 0.12379776242762, 0.00402701174697, -0.00252652547244, -0.00000187867431, -0.01811080643016, 0.01610737632548, 0.00040750053824, 0.00185461133423, 16.19074006781007, -0.48698724806222, -0.00000000000000, -0.00000000000000, -0.00000000000000, -0.00365926393469, -0.00365926413391, -0.00402959377204, 0.06579128490855, 0.18129561212668, 0.00458659796782, 0.02087446709525, -0.48698724806222, 0.44072788591624, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.11520506818229, 0.11520506584049, -0.00704132201191, -0.22404700700679, -0.31218847445018, -0.01117820973554, -0.05087412782758, -0.00000000000000, 0.00000000000000, 1.23814483672461, -0.00000000000000, -0.00000000000000, 0.10570649319984, 0.14866870850009, -0.00017813841632, -0.00566816557212, -0.01117820973554, 0.12937263730420, -0.00128706463753, -0.00000000000000, 0.00000000000000, -0.00000000000000, 1.23814483672461, -0.00000000000000, -0.03342919357600, 0.03986466151059, -0.00081074132419, -0.02579688399897, -0.05087412782758, -0.00128706463753, 0.12379776242762, -0.00000000000000, -0.00000000000000, -0.00000000000000, -0.00000000000000, 1.23814483672461, 0.20926185942547, -0.17997311434861, -0.00162876006056, -0.01085000166191, 0.00615428160024, -0.00045217453512, 0.00402701174697, -0.00365926393469, 0.11520506818229, 0.10570649319984, -0.03342919357600, 0.20926185942547, 0.49698730092503, 0.00891342400216, -0.00162875968078, -0.01084999290251, 0.00687766774479, 0.00078187335177, -0.00252652547244, -0.00365926413391, 0.11520506584049, 0.14866870850009, 0.03986466151059, -0.17997311434861, 0.00891342400216, 0.49698730092503;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
