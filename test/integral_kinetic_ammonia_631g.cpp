#include "../include/integral.h"

int test_integral_kinetic_ammonia_631g(int, char**) {
    // initialize the system
    System system("../example/molecule/ammonia.xyz", "6-31G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 22.38084969949036, -1.78033651460471, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.10579565516988, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.02890424339249, 0.02205915924711, -0.02890424002840, 0.02205916972028, -0.02890424050759, 0.02205916822846, -1.78033651460471, 1.32477427917044, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.37931337125423, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.01953670170109, 0.10971719492692, 0.01953680293364, 0.10971723620112, 0.01953678851386, 0.10971723032194, -0.00000000000000, 0.00000000000000, 3.13232564761013, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.44194816994629, 0.00000000000000, 0.00000000000000, 0.07115117388502, 0.03456803159357, 0.17868575948482, 0.08681247404708, -0.10078074549223, -0.04896320219385, -0.00000000000000, 0.00000000000000, 0.00000000000000, 3.13232564761013, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.44194816994629, 0.00000000000000, 0.15556293895738, 0.07557857861008, -0.07621833814686, -0.03702982555164, 0.10622352898009, 0.05160751790229, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 3.13232564761013, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.44194816994629, 0.13103740941321, 0.06366311420042, -0.09324900794984, -0.04530398564441, -0.15809175556281, -0.07680711781795, 0.10579565516988, 0.37931337125423, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31804724625000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.11390330155887, 0.14674920448931, 0.11390335877310, 0.14674924043500, 0.11390335062339, 0.14674923531483, 0.00000000000000, 0.00000000000000, 0.44194816994629, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.53007874375000, 0.00000000000000, 0.00000000000000, 0.11188068606994, 0.07029072151881, 0.28097173566418, 0.17652468322904, -0.15847118652006, -0.09956188871746, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.44194816994629, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.53007874375000, 0.00000000000000, 0.24461280660997, 0.15368166994086, -0.11984837974950, -0.07529653194754, 0.16702961058290, 0.10493884640203, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.44194816994629, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.53007874375000, 0.20604797455161, 0.12945273494005, -0.14662800039673, -0.09212122799952, -0.24858903316019, -0.15617977122133, -0.02890424339249, 0.01953670170109, 0.07115117388502, 0.15556293895738, 0.13103740941321, 0.11390330155887, 0.11188068606994, 0.24461280660997, 0.20604797455161, 1.39567838062028, 0.25973499598884, -0.03816100206878, 0.01266771900753, -0.03816099642927, 0.01266771138912, 0.02205915924711, 0.10971719492692, 0.03456803159357, 0.07557857861008, 0.06366311420042, 0.14674920448931, 0.07029072151881, 0.15368166994086, 0.12945273494005, 0.25973499598884, 0.24191663820000, 0.01266771900753, 0.05525791655300, 0.01266771138912, 0.05525790675115, -0.02890424002840, 0.01953680293364, 0.17868575948482, -0.07621833814686, -0.09324900794984, 0.11390335877310, 0.28097173566418, -0.11984837974950, -0.14662800039673, -0.03816100206878, 0.01266771900753, 1.39567838062028, 0.25973499598884, -0.03816081274930, 0.01266746325702, 0.02205916972028, 0.10971723620112, 0.08681247404708, -0.03702982555164, -0.04530398564441, 0.14674924043500, 0.17652468322904, -0.07529653194754, -0.09212122799952, 0.01266771900753, 0.05525791655300, 0.25973499598884, 0.24191663820000, 0.01266746325702, 0.05525758750357, -0.02890424050759, 0.01953678851386, -0.10078074549223, 0.10622352898009, -0.15809175556281, 0.11390335062339, -0.15847118652006, 0.16702961058290, -0.24858903316019, -0.03816099642927, 0.01266771138912, -0.03816081274930, 0.01266746325702, 1.39567838062028, 0.25973499598884, 0.02205916822846, 0.10971723032194, -0.04896320219385, 0.05160751790229, -0.07680711781795, 0.14674923531483, -0.09956188871746, 0.10493884640203, -0.15617977122133, 0.01266771138912, 0.05525790675115, 0.01266746325702, 0.05525758750357, 0.25973499598884, 0.24191663820000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
