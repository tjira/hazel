#include "../include/integral.h"

int test_int_kinetic_ammonia_321g(int, char**) {
    // initialize the system
    System system("../example/molecule/ammonia.xyz", "3-21G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix T = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Texp(system.shells.nbf(), system.shells.nbf()); Texp << 23.00238306589758, -2.20986074702087, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.15167514544192, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.03990300776563, 0.01999737690682, -0.03990301963710, 0.01999738833115, -0.03990301794610, 0.01999738670385, -2.20986074702087, 2.06818479393962, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.49783191854654, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.04454479153174, 0.09583136325775, -0.04454471909585, 0.09583140795832, -0.04454472941377, 0.09583140159108, 0.00000000000000, 0.00000000000000, 3.86238513196105, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.59240542740767, 0.00000000000000, 0.00000000000000, 0.03874910090207, 0.03228299357585, 0.09731278172171, 0.08107394515390, -0.05488547872776, -0.04572660762658, -0.00000000000000, -0.00000000000000, -0.00000000000000, 3.86238513196105, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.59240542740767, 0.00000000000000, 0.08471995174701, 0.07058263532121, -0.04150872752626, -0.03458205838258, 0.05784963399258, 0.04819612721319, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 3.86238513196105, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.59240542740767, 0.07136328920593, 0.05945481452097, -0.05078367958673, -0.04230927510943, -0.08609721673121, -0.07172996826240, 0.15167514544192, 0.49783191854654, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.42480750000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.10125587929799, 0.15137093494017, 0.10125595552930, 0.15137098141906, 0.10125594467075, 0.15137097479851, 0.00000000000000, 0.00000000000000, 0.59240542740767, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.70801250000000, 0.00000000000000, 0.00000000000000, 0.12898351713791, 0.07864238074176, 0.32392299864953, 0.19749864074838, -0.18269617361879, -0.11139143381882, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.59240542740767, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.70801250000000, 0.00000000000000, 0.28200595868537, 0.17194150436034, -0.13816922353408, -0.08424296501023, 0.19256289679304, 0.11740726009313, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.59240542740767, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.70801250000000, 0.23754584808494, 0.14483378530255, -0.16904256032094, -0.10306670422045, -0.28659004932870, -0.17473642649758, -0.03990300776563, -0.04454479153174, 0.03874910090207, 0.08471995174701, 0.07136328920593, 0.10125587929799, 0.12898351713791, 0.28200595868537, 0.23754584808494, 1.54940494556963, 0.29315085381580, -0.03398795810424, 0.00313282223253, -0.03398795004114, 0.00313281524091, 0.01999737690682, 0.09583136325775, 0.03228299357585, 0.07058263532121, 0.05945481452097, 0.15137093494017, 0.07864238074176, 0.17194150436034, 0.14483378530255, 0.29315085381580, 0.27478737000000, 0.00313282223253, 0.04859027131456, 0.00313281524091, 0.04859026059740, -0.03990301963710, -0.04454471909585, 0.09731278172171, -0.04150872752626, -0.05078367958673, 0.10125595552930, 0.32392299864953, -0.13816922353408, -0.16904256032094, -0.03398795810424, 0.00313282223253, 1.54940494556963, 0.29315085381580, -0.03398768742520, 0.00313258752347, 0.01999738833115, 0.09583140795832, 0.08107394515390, -0.03458205838258, -0.04230927510943, 0.15137098141906, 0.19749864074838, -0.08424296501023, -0.10306670422045, 0.00313282223253, 0.04859027131456, 0.29315085381580, 0.27478737000000, 0.00313258752347, 0.04858991153833, -0.03990301794610, -0.04454472941377, -0.05488547872776, 0.05784963399258, -0.08609721673121, 0.10125594467075, -0.18269617361879, 0.19256289679304, -0.28659004932870, -0.03398795004114, 0.00313281524091, -0.03398768742520, 0.00313258752347, 1.54940494556963, 0.29315085381580, 0.01999738670385, 0.09583140159108, -0.04572660762658, 0.04819612721319, -0.07172996826240, 0.15137097479851, -0.11139143381882, 0.11740726009313, -0.17473642649758, 0.00313281524091, 0.04859026059740, 0.00313258752347, 0.04858991153833, 0.29315085381580, 0.27478737000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED KINETIC: " << T << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED KINETIC NORM: " << T.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED KINETIC: " << Texp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED KINETIC NORM: " << Texp.norm() << std::endl;

    // return success or failure based on the error
    return (T - Texp).norm() > 1e-8;
}
