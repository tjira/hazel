#include "../include/integral.h"

int test_integral_overlap_water_321g(int, char**) {
    // initialize the system
    System system("../example/molecule/water.xyz", "3-21G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 1.00000000000000, 0.20921460986922, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.18308745823386, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.01919690979154, 0.05846310649020, 0.01919674306535, 0.05846298759526, 0.20921460986922, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.74001611059698, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.14343787611728, 0.29174791010117, 0.14343701391052, 0.29174737635980, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.49876667737339, 0.00000000000000, 0.00000000000000, 0.13138005756851, 0.08283630171787, 0.08077625125563, 0.05093038098824, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.49876667737339, 0.00000000000000, -0.09468990613820, -0.05970283298446, 0.16819017398153, 0.10604589227903, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.49876667737339, 0.09302080995505, 0.05865045290804, -0.00816681116660, -0.00514927095165, 0.18308745823386, 0.74001611059698, -0.00000000000000, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.34417336325536, 0.59269833272766, 0.34417234896377, 0.59269751128654, 0.00000000000000, 0.00000000000000, 0.49876667737339, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.38713916453472, 0.31353091962234, 0.23802515255238, 0.19276882712889, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.49876667737339, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, -0.27902386275861, -0.22597199224838, 0.49560967731804, 0.40137815346764, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.49876667737339, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.27410551735801, 0.22198879060480, -0.02406532171991, -0.01948972111847, 0.01919690979154, 0.14343787611728, 0.13138005756851, -0.09468990613820, 0.09302080995505, 0.34417336325536, 0.38713916453472, -0.27902386275861, 0.27410551735801, 1.00000000000000, 0.64589812339497, 0.02818487069963, 0.18676554949878, 0.05846310649020, 0.29174791010117, 0.08283630171787, -0.05970283298446, 0.05865045290804, 0.59269833272766, 0.31353091962234, -0.22597199224838, 0.22198879060480, 0.64589812339497, 1.00000000000000, 0.18676554949878, 0.47146404981449, 0.01919674306535, 0.14343701391052, 0.08077625125563, 0.16819017398153, -0.00816681116660, 0.34417234896377, 0.23802515255238, 0.49560967731804, -0.02406532171991, 0.02818487069963, 0.18676554949878, 1.00000000000000, 0.64589812339497, 0.05846298759526, 0.29174737635980, 0.05093038098824, 0.10604589227903, -0.00514927095165, 0.59269751128654, 0.19276882712889, 0.40137815346764, -0.01948972111847, 0.18676554949878, 0.47146404981449, 0.64589812339497, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
