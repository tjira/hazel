#include "../include/integral.h"

int test_int_nuclear_formaldehyde_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/formaldehyde.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -63.74796927509894, -7.92384641911813, -0.06332150414412, -0.00160197132839, -0.00729086694945, -0.00001590582869, -1.25370893913378, 2.09783097061904, 0.05307302890983, 0.24154530310828, -0.15635036720878, -0.15635060875626, -7.92384641911813, -12.17552745364144, -0.78771910204261, -0.01992851305586, -0.09069833722895, -0.77311912541657, -3.98617971203461, 5.06897237672629, 0.12823993537884, 0.58364402788413, -0.70605791429293, -0.70605879605715, -0.06332150414412, -0.78771910204261, -12.38717748487091, -0.01112883434858, -0.04937986118918, -1.29662198909845, -3.57676045541738, 3.75447424631093, 0.14407307916996, 0.65740542815627, -0.66872429299801, -0.73186641951616, -0.00160197132839, -0.01992851305586, -0.01112883434858, -11.95279620772428, -0.00010025811111, -0.03280324176954, -0.09048847234124, 0.14407308849337, -1.94370375920354, 0.01817192197647, 0.03614284087631, -0.07157651120256, -0.00729086694945, -0.09069833722895, -0.04937986118918, -0.00010025811111, -11.96425639099811, -0.14929370130941, -0.41182995934389, 0.65740538008500, 0.01817191968681, -1.87977279850652, -0.36665957061413, 0.20539550743561, -0.00001590582869, -0.77311912541657, -1.29662198909845, -0.03280324176954, -0.14929370130941, -38.09305569206587, -5.29503598919438, 0.09017064813596, 0.00228122531749, 0.01038230328368, -1.30720256263495, -1.30720254567998, -1.25370893913378, -3.98617971203461, -3.57676045541738, -0.09048847234124, -0.41182995934389, -5.29503598919438, -9.54983617610029, 0.97892150387712, 0.02476571547691, 0.11271361231668, -3.81569643455609, -3.81569669105410, 2.09783097061904, 5.06897237672629, 3.75447424631093, 0.14407308849337, 0.65740538008500, 0.09017064813596, 0.97892150387712, -10.02844838857095, -0.02563884700313, -0.08214548336748, -1.28218153807006, -1.89778468424866, 0.05307302890983, 0.12823993537884, 0.14407307916996, -1.94370375920354, 0.01817191968681, 0.00228122531749, 0.02476571547691, -0.02563884700313, -9.15794490664687, 0.02918428829017, 0.48488654005544, -0.56533697856061, 0.24154530310828, 0.58364402788413, 0.65740542815627, 0.01817192197647, -1.87977279850652, 0.01038230328368, 0.11271361231668, -0.08214548336748, 0.02918428829017, -9.33153134852811, -2.97173330212097, 2.60559270330568, -0.15635036720878, -0.70605791429293, -0.66872429299801, 0.03614284087631, -0.36665957061413, -1.30720256263495, -3.81569643455609, -1.28218153807006, 0.48488654005544, -2.97173330212097, -6.41460243146400, -1.06630174119746, -0.15635060875626, -0.70605879605715, -0.73186641951616, -0.07157651120256, 0.20539550743561, -1.30720254567998, -3.81569669105410, -1.89778468424866, -0.56533697856061, 2.60559270330568, -1.06630174119746, -6.41460305135231;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
