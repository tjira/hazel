#include "../include/integral.h"

int test_integral_kinetic_water_321g(int, char**) {
    // initialize the system
    System system("../example/molecule/water.xyz", "3-21G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 30.46994366329924, -2.85420501940650, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.19895785242550, -0.00000000000000, 0.00000000000000, 0.00000000000000, -0.03533892547938, 0.01833687357404, -0.03533887423686, 0.01833679338884, -2.85420501940650, 2.78788218378857, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.65239476933372, -0.00000000000000, -0.00000000000000, 0.00000000000000, -0.05852610534754, 0.08837659309292, -0.05852661980905, 0.08837625845475, -0.00000000000000, 0.00000000000000, 5.35130578087369, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.76116401862445, -0.00000000000000, 0.00000000000000, 0.06378500452883, 0.05252171644564, 0.03921633685084, 0.03229198295420, 0.00000000000000, 0.00000000000000, 0.00000000000000, 5.35130578087369, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.76116401862445, 0.00000000000000, -0.04597193975737, -0.03785411951020, 0.08165521939101, 0.06723751284382, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 5.35130578087369, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.76116401862445, 0.04516159373096, 0.03718686606189, -0.00396493291937, -0.00326485226638, 0.19895785242550, 0.65239476933372, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.56052600000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.10457480297485, 0.15595771562268, 0.10457396342903, 0.15595729751892, -0.00000000000000, -0.00000000000000, 0.76116401862445, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.93421000000000, 0.00000000000000, 0.00000000000000, 0.32044175316561, 0.15958356079119, 0.19701714323969, 0.09811700640486, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.76116401862445, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.93421000000000, 0.00000000000000, -0.23095285609986, -0.11501709370646, 0.41022388491341, 0.20429663572224, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.76116401862445, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.93421000000000, 0.22688185691605, 0.11298969078748, -0.01991924334702, -0.00992003282009, -0.03533892547938, -0.05852610534754, 0.06378500452883, -0.04597193975737, 0.04516159373096, 0.10457480297485, 0.32044175316561, -0.23095285609986, 0.22688185691605, 1.54940494556963, 0.29315085381580, -0.04586622105354, 0.01459179394577, 0.01833687357404, 0.08837659309292, 0.05252171644564, -0.03785411951020, 0.03718686606189, 0.15595771562268, 0.15958356079119, -0.11501709370646, 0.11298969078748, 0.29315085381580, 0.27478737000000, 0.01459179394577, 0.06461101025319, -0.03533887423686, -0.05852661980905, 0.03921633685084, 0.08165521939101, -0.00396493291937, 0.10457396342903, 0.19701714323969, 0.41022388491341, -0.01991924334702, -0.04586622105354, 0.01459179394577, 1.54940494556963, 0.29315085381580, 0.01833679338884, 0.08837625845475, 0.03229198295420, 0.06723751284382, -0.00326485226638, 0.15595729751892, 0.09811700640486, 0.20429663572224, -0.00992003282009, 0.01459179394577, 0.06461101025319, 0.29315085381580, 0.27478737000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
