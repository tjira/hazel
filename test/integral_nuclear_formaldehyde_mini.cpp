#include "../include/integral.h"

int test_integral_nuclear_formaldehyde_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/formaldehyde.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << -64.44396933447305, -6.35330711966972, -0.05833112597938, -0.00147571970430, -0.00671627252504, -0.00000027842561, -1.30220168802367, 2.34687827310045, 0.05937367699806, 0.27022073356817, -0.26177127185013, -0.26177163191844, -6.35330711966972, -12.06267242015300, -0.80485606409833, -0.02036206132031, -0.09267149435877, -0.77781896688473, -4.20420403117426, 5.49485537688519, 0.13901434933192, 0.63268041234074, -1.10175120755203, -1.10175236513977, -0.05833112597938, -0.80485606409833, -12.28557205249231, -0.01291668711664, -0.05722330806661, -1.74461769994243, -3.90720034663327, 3.13592180480049, 0.14030431257466, 0.64111948688587, -1.07612266532624, -1.17497277425065, -0.00147571970430, -0.02036206132031, -0.01291668711664, -11.78177567103838, -0.00003314291908, -0.04413708594473, -0.09884827293917, 0.14030432460250, -2.41695144476021, 0.01854405321728, 0.05584314963681, -0.11279379003804, -0.00671627252504, -0.09267149435877, -0.05722330806661, -0.00003314291908, -11.79549335181031, -0.20087615061998, -0.44987696639582, 0.64111942489096, 0.01854405026398, -2.35893336565516, -0.57737790582737, 0.31818656083315, -0.00000027842561, -0.77781896688473, -1.74461769994243, -0.04413708594473, -0.20087615061998, -38.47511001487704, -3.85261298382559, 0.07384541087330, 0.00186821348573, 0.00850260553344, -1.50415587249736, -1.50415585582158, -1.30220168802367, -4.20420403117426, -3.90720034663327, -0.09884827293917, -0.44987696639582, -3.85261298382559, -9.11407392104525, 1.00798095535039, 0.02550089045150, 0.11605953270575, -4.35011729317096, -4.35011758791470, 2.34687827310045, 5.49485537688519, 3.13592180480049, 0.14030432460250, 0.64111942489096, 0.07384541087330, 1.00798095535039, -9.47761029708201, -0.02756013322961, -0.08995343950134, -1.19309295892706, -1.81240925997777, 0.05937367699806, 0.13901434933192, 0.14030431257466, -2.41695144476021, 0.01854405026398, 0.00186821348573, 0.02550089045150, -0.02756013322961, -8.53506847379289, 0.02983405569818, 0.49026079146499, -0.56629747249983, 0.27022073356817, 0.63268041234074, 0.64111948688587, 0.01854405321728, -2.35893336565516, 0.00850260553344, 0.11605953270575, -0.08995343950134, 0.02983405569818, -8.71397123369816, -2.97851002922055, 2.63245734030105, -0.26177127185013, -1.10175120755203, -1.07612266532624, 0.05584314963681, -0.57737790582737, -1.50415587249736, -4.35011729317096, -1.19309295892706, 0.49026079146499, -2.97851002922055, -6.10397409336682, -1.69393541257572, -0.26177163191844, -1.10175236513977, -1.17497277425065, -0.11279379003804, 0.31818656083315, -1.50415585582158, -4.35011758791470, -1.81240925997777, -0.56629747249983, 2.63245734030105, -1.69393541257572, -6.10397470995833;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
