#include "../include/integral.h"

int test_int_overlap_methane_321g(int, char**) {
    // initialize the system
    System system("../example/molecule/methane.xyz", "3-21G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix S = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Sexp(system.shells.nbf(), system.shells.nbf()); Sexp << 1.00000000000000, 0.19144744450067, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.18031400188717, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.01969883071139, 0.08160773228775, 0.01969880501768, 0.08160770625575, 0.01969877581489, 0.08160767666846, 0.01969876341021, 0.08160766410042, 0.19144744450067, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.76135740608460, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.19867362557009, 0.40445172355153, 0.19867348795834, 0.40445161878722, 0.19867333155241, 0.40445149971480, 0.19867326511464, 0.40445144913545, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.52895881204315, 0.00000000000000, 0.00000000000000, 0.14515753848042, 0.11445666396067, 0.05631286571949, 0.04440269495925, 0.09182660840826, 0.07240532155163, -0.29329874802677, -0.23126624784014, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.52895881204315, 0.00000000000000, 0.04420595219888, 0.03485637651930, 0.22619216353290, 0.17835252230910, -0.25566305553966, -0.20159043294860, -0.01473671170122, -0.01161990647274, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.52895881204315, 0.25690275569138, 0.20256772529045, -0.18625190656247, -0.14685962944717, -0.12340167147012, -0.09730227281267, 0.05274773510055, 0.04159162240153, 0.18031400188717, 0.76135740608460, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.34160074576364, 0.67212590341535, 0.34160064801102, 0.67212578939937, 0.34160053690790, 0.67212565981171, 0.34160048971373, 0.67212560476572, -0.00000000000000, 0.00000000000000, 0.52895881204315, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.24543758999188, 0.28627166439510, 0.09521586472727, 0.11105718265125, 0.15526389017145, 0.18109558267550, -0.49592068933671, -0.57842844958833, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.52895881204315, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.07474501486157, 0.08718053257599, 0.38245403017849, 0.44608392946804, -0.43228472949501, -0.50420516247000, -0.02491739318559, -0.02906297199942, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.52895881204315, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.43438042473883, 0.50664939781535, -0.31492157456146, -0.36731591869766, -0.20865219676770, -0.24336625282571, 0.08918787866639, 0.10402632414483, 0.01969883071139, 0.19867362557009, 0.14515753848042, 0.04420595219888, 0.25690275569138, 0.34160074576364, 0.24543758999188, 0.07474501486157, 0.43438042473883, 1.00000000000000, 0.64589812339497, 0.00823967884127, 0.11944929360854, 0.00823986194055, 0.11945026080612, 0.00823979051708, 0.11944988352277, 0.08160773228775, 0.40445172355153, 0.11445666396067, 0.03485637651930, 0.20256772529045, 0.67212590341535, 0.28627166439510, 0.08718053257599, 0.50664939781535, 0.64589812339497, 1.00000000000000, 0.11944929360854, 0.35948604424942, 0.11945026080612, 0.35948781069309, 0.11944988352277, 0.35948712164139, 0.01969880501768, 0.19867348795834, 0.05631286571949, 0.22619216353290, -0.18625190656247, 0.34160064801102, 0.09521586472727, 0.38245403017849, -0.31492157456146, 0.00823967884127, 0.11944929360854, 1.00000000000000, 0.64589812339497, 0.00824003174720, 0.11945115777488, 0.00824001749657, 0.11945108249933, 0.08160770625575, 0.40445161878722, 0.04440269495925, 0.17835252230910, -0.14685962944717, 0.67212578939937, 0.11105718265125, 0.44608392946804, -0.36731591869766, 0.11944929360854, 0.35948604424942, 0.64589812339497, 1.00000000000000, 0.11945115777488, 0.35948944886914, 0.11945108249933, 0.35948931139007, 0.01969877581489, 0.19867333155241, 0.09182660840826, -0.25566305553966, -0.12340167147012, 0.34160053690790, 0.15526389017145, -0.43228472949501, -0.20865219676770, 0.00823986194055, 0.11945026080612, 0.00824003174720, 0.11945115777488, 1.00000000000000, 0.64589812339497, 0.00824001285660, 0.11945105798976, 0.08160767666846, 0.40445149971480, 0.07240532155163, -0.20159043294860, -0.09730227281267, 0.67212565981171, 0.18109558267550, -0.50420516247000, -0.24336625282571, 0.11945026080612, 0.35948781069309, 0.11945115777488, 0.35948944886914, 0.64589812339497, 1.00000000000000, 0.11945105798976, 0.35948926662713, 0.01969876341021, 0.19867326511464, -0.29329874802677, -0.01473671170122, 0.05274773510055, 0.34160048971373, -0.49592068933671, -0.02491739318559, 0.08918787866639, 0.00823979051708, 0.11944988352277, 0.00824001749657, 0.11945108249933, 0.00824001285660, 0.11945105798976, 1.00000000000000, 0.64589812339497, 0.08160766410042, 0.40445144913545, -0.23126624784014, -0.01161990647274, 0.04159162240153, 0.67212560476572, -0.57842844958833, -0.02906297199942, 0.10402632414483, 0.11944988352277, 0.35948712164139, 0.11945108249933, 0.35948931139007, 0.11945105798976, 0.35948926662713, 0.64589812339497, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP: " << S << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP NORM: " << S.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP: " << Sexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP NORM: " << Sexp.norm() << std::endl;

    // return success or failure based on the error
    return (S - Sexp).norm() > 1e-8;
}
