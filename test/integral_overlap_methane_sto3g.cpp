#include "../include/integral.h"

int test_integral_overlap_methane_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/methane.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 1.00000000000000, 0.24836239705696, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.06330024157717, 0.06330020733134, 0.06330016840842, 0.06330015187483, 0.24836239705696, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.49478331566376, 0.49478318188727, 0.49478302984035, 0.49478296525417, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.22849309180753, 0.08864235202442, 0.14454476637250, -0.46168324656684, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.06958477527214, 0.35605016951056, -0.40244061360473, -0.02319714266669, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.40439170818345, -0.29318001944655, -0.19424724578002, 0.08303051327054, 0.06330024157717, 0.49478331566376, 0.22849309180753, 0.06958477527214, 0.40439170818345, 1.00000000000000, 0.17227661976172, 0.17227774753517, 0.17227730761461, 0.06330020733134, 0.49478318188727, 0.08864235202442, 0.35605016951056, -0.29318001944655, 0.17227661976172, 1.00000000000000, 0.17227879341998, 0.17227870564709, 0.06330016840842, 0.49478302984035, 0.14454476637250, -0.40244061360473, -0.19424724578002, 0.17227774753517, 0.17227879341998, 1.00000000000000, 0.17227867706840, 0.06330015187483, 0.49478296525417, -0.46168324656684, -0.02319714266669, 0.08303051327054, 0.17227730761461, 0.17227870564709, 0.17227867706840, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
