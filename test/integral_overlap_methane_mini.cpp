#include "../include/integral.h"

int test_integral_overlap_methane_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/methane.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 1.00000000000000, 0.19254595363088, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.06896301421932, 0.06896298469548, 0.06896295113945, 0.06896293688560, 0.19254595363088, 1.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.58027267498028, 0.58027255121926, 0.58027241055566, 0.58027235080486, 0.00000000000000, -0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.24594895465503, 0.09541424571741, 0.15558738135821, -0.49695393775432, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.07490074471269, 0.38325086807314, -0.43318539158721, -0.02496930845679, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.43528544829118, -0.31557770948135, -0.20908692210324, 0.08937370119100, 0.06896301421932, 0.58027267498028, 0.24594895465503, 0.07490074471269, 0.43528544829118, 1.00000000000000, 0.27735728687085, 0.27735871314830, 0.27735815678797, 0.06896298469548, 0.58027255121926, 0.09541424571741, 0.38325086807314, -0.31557770948135, 0.27735728687085, 1.00000000000000, 0.27736003586008, 0.27735992485536, 0.06896295113945, 0.58027241055566, 0.15558738135821, -0.43318539158721, -0.20908692210324, 0.27735871314830, 0.27736003586008, 1.00000000000000, 0.27735988871243, 0.06896293688560, 0.58027235080486, -0.49695393775432, -0.02496930845679, 0.08937370119100, 0.27735815678797, 0.27735992485536, 0.27735988871243, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
