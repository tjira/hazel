#include "../include/integral.h"

int test_integral_kinetic_methane_631gs(int, char**) {
    // initialize the system
    System system("../example/molecule/methane.xyz", "6-31G*", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 16.20756797345014, -1.24756866124283, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.08995049652200, -0.00000000000000, 0.00000000000000, -0.00000000000000, -0.52481697284981, 0.00000000000000, 0.00000000000000, -0.52481697284981, 0.00000000000000, -0.52481697284981, -0.03489734899803, 0.02454593172330, -0.03489734797607, 0.02454591678327, -0.03489734681451, 0.02454589980282, -0.03489734632109, 0.02454589258990, -1.24756866124283, 0.93224556748206, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.30671845828079, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.52004155928852, 0.00000000000000, 0.00000000000000, 0.52004155928852, 0.00000000000000, 0.52004155928852, 0.04555542749372, 0.11596076756403, 0.04555531225668, 0.11596071677002, 0.04555518128132, 0.11596065903885, 0.04555512564590, 0.11596063451592, -0.00000000000000, 0.00000000000000, 2.17833218887281, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.37667339168477, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.11904137752404, 0.06469457908306, 0.04618126129087, 0.02509782600878, 0.07530546458462, 0.04092580425145, -0.24052934395069, -0.13071907743320, 0.00000000000000, 0.00000000000000, -0.00000000000000, 2.17833218887281, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.37667339168477, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.03625259493654, 0.01970194245790, 0.18549649840402, 0.10081056064837, -0.20966499262328, -0.11394536231618, -0.01208532808725, -0.00656794265554, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 2.17833218887281, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.37667339168477, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.21068184434218, 0.11449777819823, -0.15274214609732, -0.08300976846025, -0.10119964530608, -0.05499835764852, 0.04325752565934, 0.02350891476838, 0.08995049652200, 0.30671845828079, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.25307171730000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.22628830325202, 0.00000000000000, 0.00000000000000, 0.22628830325202, 0.00000000000000, 0.22628830325202, 0.09597472474705, 0.13475271342643, 0.09597467596088, 0.13475267626812, 0.09597462051178, 0.13475263403493, 0.09597459695822, 0.13475261609520, -0.00000000000000, -0.00000000000000, 0.37667339168477, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.42178619550000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.13197837551677, 0.10052220536350, 0.05120012000858, 0.03899691722404, 0.08348954294884, 0.06359038563419, -0.26666979627582, -0.20311090308243, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.37667339168477, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.42178619550000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.04019239937833, 0.03061280765535, 0.20565577279576, 0.15663910840480, -0.23245105123573, -0.17704794477327, -0.01339874763727, -0.01020524922877, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.37667339168477, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.42178619550000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.23357800577822, 0.17790623784615, -0.16934176312972, -0.12898029766799, -0.11219786213118, -0.08545627474119, 0.04795870377187, 0.03652807993182, -0.52481697284981, 0.52004155928852, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.22628830325202, 0.00000000000000, -0.00000000000000, 0.00000000000000, 1.73333333333333, 0.00000000000000, 0.00000000000000, -0.13333333333333, 0.00000000000000, -0.13333333333333, 0.02506494526747, 0.08490406254518, -0.06869377264057, 0.07218581202403, -0.04113646121388, 0.07592387769388, 0.36529430693835, 0.13105563125348, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.93333333333333, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.03361161740699, 0.00455935918721, 0.06671974816784, 0.00905042895430, -0.12297190546804, -0.01668096178008, 0.02264019960932, 0.00307111171403, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.93333333333333, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.19533381152504, 0.02649670193984, -0.05493859781672, -0.00745233442936, -0.05935522692784, -0.00805145100471, -0.08103702344380, -0.01099255997132, -0.52481697284981, 0.52004155928852, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.22628830325202, -0.00000000000000, 0.00000000000000, 0.00000000000000, -0.13333333333333, 0.00000000000000, 0.00000000000000, 1.73333333333333, 0.00000000000000, -0.13333333333333, -0.07506833993982, 0.07132115136519, 0.18268919900693, 0.10628551694938, 0.25707325950866, 0.11637559660390, -0.08416677930502, 0.07008685753329, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.93333333333333, 0.00000000000000, 0.05948652219854, 0.00806924636255, -0.22067213491725, -0.02993382820089, 0.16525644300347, 0.02241679836676, -0.00407168206360, -0.00055231803151, -0.52481697284981, 0.52004155928852, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.22628830325202, -0.00000000000000, -0.00000000000000, 0.00000000000000, -0.13333333333333, 0.00000000000000, 0.00000000000000, -0.13333333333333, 0.00000000000000, 1.73333333333333, 0.26040139465225, 0.11682705481285, 0.09640224594321, 0.09458082741096, -0.00553949840674, 0.08075255440514, -0.07073038594173, 0.07190948567987, -0.03489734899803, 0.04555542749372, 0.11904137752404, 0.03625259493654, 0.21068184434218, 0.09597472474705, 0.13197837551677, 0.04019239937833, 0.23357800577822, 0.02506494526747, 0.03361161740699, 0.19533381152504, -0.07506833993982, 0.05948652219854, 0.26040139465225, 1.39567838062028, 0.25973499598884, -0.02819115556858, 0.00133388871781, -0.02819145161425, 0.00133417724292, -0.02819133613316, 0.00133406469517, 0.02454593172330, 0.11596076756403, 0.06469457908306, 0.01970194245790, 0.11449777819823, 0.13475271342643, 0.10052220536350, 0.03061280765535, 0.17790623784615, 0.08490406254518, 0.00455935918721, 0.02649670193984, 0.07132115136519, 0.00806924636255, 0.11682705481285, 0.25973499598884, 0.24191663820000, 0.00133388871781, 0.03926934292096, 0.00133417724292, 0.03926979626191, 0.00133406469517, 0.03926961942324, -0.03489734797607, 0.04555531225668, 0.04618126129087, 0.18549649840402, -0.15274214609732, 0.09597467596088, 0.05120012000858, 0.20565577279576, -0.16934176312972, -0.06869377264057, 0.06671974816784, -0.05493859781672, 0.18268919900693, -0.22067213491725, 0.09640224594321, -0.02819115556858, 0.00133388871781, 1.39567838062028, 0.25973499598884, -0.02819172616330, 0.00133444481954, -0.02819170312257, 0.00133442236388, 0.02454591678327, 0.11596071677002, 0.02509782600878, 0.10081056064837, -0.08300976846025, 0.13475267626812, 0.03899691722404, 0.15663910840480, -0.12898029766799, 0.07218581202403, 0.00905042895430, -0.00745233442936, 0.10628551694938, -0.02993382820089, 0.09458082741096, 0.00133388871781, 0.03926934292096, 0.25973499598884, 0.24191663820000, 0.00133444481954, 0.03927021668506, 0.00133442236388, 0.03927018140226, -0.03489734681451, 0.04555518128132, 0.07530546458462, -0.20966499262328, -0.10119964530608, 0.09597462051178, 0.08348954294884, -0.23245105123573, -0.11219786213118, -0.04113646121388, -0.12297190546804, -0.05935522692784, 0.25707325950866, 0.16525644300347, -0.00553949840674, -0.02819145161425, 0.00133417724292, -0.02819172616330, 0.00133444481954, 1.39567838062028, 0.25973499598884, -0.02819169562055, 0.00133441505236, 0.02454589980282, 0.11596065903885, 0.04092580425145, -0.11394536231618, -0.05499835764852, 0.13475263403493, 0.06359038563419, -0.17704794477327, -0.08545627474119, 0.07592387769388, -0.01668096178008, -0.00805145100471, 0.11637559660390, 0.02241679836676, 0.08075255440514, 0.00133417724292, 0.03926979626191, 0.00133444481954, 0.03927021668506, 0.25973499598884, 0.24191663820000, 0.00133441505236, 0.03927016991424, -0.03489734632109, 0.04555512564590, -0.24052934395069, -0.01208532808725, 0.04325752565934, 0.09597459695822, -0.26666979627582, -0.01339874763727, 0.04795870377187, 0.36529430693835, 0.02264019960932, -0.08103702344380, -0.08416677930502, -0.00407168206360, -0.07073038594173, -0.02819133613316, 0.00133406469517, -0.02819170312257, 0.00133442236388, -0.02819169562055, 0.00133441505236, 1.39567838062028, 0.25973499598884, 0.02454589258990, 0.11596063451592, -0.13071907743320, -0.00656794265554, 0.02350891476838, 0.13475261609520, -0.20311090308243, -0.01020524922877, 0.03652807993182, 0.13105563125348, 0.00307111171403, -0.01099255997132, 0.07008685753329, -0.00055231803151, 0.07190948567987, 0.00133406469517, 0.03926961942324, 0.00133442236388, 0.03927018140226, 0.00133441505236, 0.03927016991424, 0.25973499598884, 0.24191663820000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
