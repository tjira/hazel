#include "../include/integral.h"

int test_int_overlap_formaldehyde_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/formaldehyde.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix S = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Sexp(system.shells.nbf(), system.shells.nbf()); Sexp << 1.00000000000000, 0.23670392057273, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000108391745, 0.03645825626247, -0.06088047130159, -0.00154021513635, -0.00700980779414, 0.00457179227408, 0.00457179930295, 0.23670392057273, 1.00000000000000, -0.00000000000000, -0.00000000000000, -0.00000000000000, 0.03576703190702, 0.36116172437223, -0.43744312192874, -0.01106687420913, -0.05036741897739, 0.07056980916968, 0.07056990102298, 0.00000000000000, -0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.05967826867583, 0.31802800279209, -0.30632108088712, -0.01302921643391, -0.05929840627740, 0.06581458499893, 0.07355030344046, -0.00000000000000, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00150980061029, 0.00804579092789, -0.01302921643391, 0.20835840983269, -0.00150019047089, -0.00483560573093, 0.00836141325938, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00687138558491, 0.03661790267165, -0.05929840627740, -0.00150019047089, 0.20186038796001, 0.04306532006956, -0.02701885610700, 0.00000108391745, 0.03576703190702, 0.05967826867583, 0.00150980061029, 0.00687138558491, 1.00000000000000, 0.24836239705696, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.06064265291782, 0.06064265169036, 0.03645825626247, 0.36116172437223, 0.31802800279209, 0.00804579092789, 0.03661790267165, 0.24836239705696, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.48422528798842, 0.48422528302843, -0.06088047130159, -0.43744312192874, -0.30632108088712, -0.01302921643391, -0.05929840627740, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.20681855918178, 0.29087568193199, -0.00154021513635, -0.01106687420913, -0.01302921643391, 0.20835840983269, -0.00150019047089, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, -0.06540542061998, 0.07799664582325, -0.00700980779414, -0.05036741897739, -0.05929840627740, -0.00150019047089, 0.20186038796001, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.40942836100197, -0.35212387928655, 0.00457179227408, 0.07056980916968, 0.06581458499893, -0.00483560573093, 0.04306532006956, 0.06064265291782, 0.48422528798842, 0.20681855918178, -0.06540542061998, 0.40942836100197, 1.00000000000000, 0.15105627975514, 0.00457179930295, 0.07056990102298, 0.07355030344046, 0.00836141325938, -0.02701885610700, 0.06064265169036, 0.48422528302843, 0.29087568193199, 0.07799664582325, -0.35212387928655, 0.15105627975514, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP: " << S << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP NORM: " << S.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP: " << Sexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP NORM: " << Sexp.norm() << std::endl;

    // return success or failure based on the error
    return (S - Sexp).norm() > 1e-8;
}
