#include "../include/integral.h"

int test_int_nuclear_water_321g(int, char**) {
    // initialize the system
    System system("../example/molecule/water.xyz", "3-21G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -63.31353035697930, -4.84404242325926, -0.02108933908529, -0.00730629568535, -0.00843488190420, -6.61981430347689, -0.00298387177065, -0.00103374739983, -0.00119342791639, -0.65948808898914, -2.08600395767572, -0.65948220524937, -2.08599968774305, -4.84404242325926, -12.92901923540887, -0.13819475977686, -0.04787688116310, -0.05527230951143, -8.69732690371923, -0.08372554635543, -0.02900629941831, -0.03348682802265, -1.51454406384896, -3.26525372118479, -1.51453405832951, -3.26524753203926, -0.02108933908529, -0.13819475977686, -14.05163758337860, -0.00195004787202, -0.01968208874407, -0.13213658018935, -4.97031981547688, -0.00181018662942, -0.01827038362559, -1.26495707373022, -0.83688958089648, -0.78316464871215, -0.53458521278540, -0.00730629568535, -0.04787688116310, -0.00195004787202, -14.07456666019582, 0.01733333107294, -0.04577806090621, -0.00181018662942, -4.99160430675140, 0.01609009242418, 0.89664270468012, 0.54765161024296, -1.60620130532080, -1.02279457652364, -0.00843488190420, -0.05527230951143, -0.01968208874407, 0.01733333107294, -14.02598928230749, -0.05284928128808, -0.01827038362559, 0.01609009242418, -4.94651114474466, -0.89127999880189, -0.57651366809623, 0.07211338641565, 0.02797996494623, -6.61981430347689, -8.69732690371923, -0.13213658018935, -0.04577806090621, -0.05284928128808, -8.84978272626664, -0.22432085956908, -0.07771503397410, -0.08971920581338, -2.55762475843045, -4.39222046306450, -2.55761460548876, -4.39221356514270, -0.00298387177065, -0.08372554635543, -4.97031981547688, -0.00181018662942, -0.01827038362559, -0.22432085956908, -6.20364891885859, -0.00616166939049, -0.06218816605829, -2.50990374525165, -1.83346267840579, -1.55255690174468, -1.17604334546300, -0.00103374739983, -0.02900629941831, -0.00181018662942, -4.99160430675140, 0.01609009242418, -0.07771503397410, -0.00616166939049, -6.27609676143322, 0.05476698875894, 1.78294899980204, 1.18630408724523, -3.19037130902260, -2.22893880306383, -0.00119342791639, -0.03348682802265, -0.01827038362559, 0.01609009242418, -4.94651114474466, -0.08971920581338, -0.06218816605829, 0.05476698875894, -6.12260958888828, -1.76957152157586, -1.25913408733502, 0.14475264320824, 0.05545537152683, -0.65948808898914, -1.51454406384896, -1.26495707373022, 0.89664270468012, -0.89127999880189, -2.55762475843045, -2.50990374525165, 1.78294899980204, -1.76957152157586, -6.34627902675421, -3.75087759519507, -0.22106757184725, -1.23855406423893, -2.08600395767572, -3.26525372118479, -0.83688958089648, 0.54765161024296, -0.57651366809623, -4.39222046306450, -1.83346267840579, 1.18630408724523, -1.25913408733502, -3.75087759519507, -4.83734917875615, -1.23855281740766, -2.69912021710835, -0.65948220524937, -1.51453405832951, -0.78316464871215, -1.60620130532080, 0.07211338641565, -2.55761460548876, -1.55255690174468, -3.19037130902260, 0.14475264320824, -0.22106757184725, -1.23855281740766, -6.34627217894857, -3.75087343664275, -2.08599968774305, -3.26524753203926, -0.53458521278540, -1.02279457652364, 0.02797996494623, -4.39221356514270, -1.17604334546300, -2.22893880306383, 0.05545537152683, -1.23855406423893, -2.69912021710835, -3.75087343664275, -4.83734548232200;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
