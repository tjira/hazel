#include "../include/integral.h"

int test_int_overlap_ammonia_321g(int, char**) {
    // initialize the system
    System system("../example/molecule/ammonia.xyz", "3-21G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix S = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Sexp(system.shells.nbf(), system.shells.nbf()); Sexp << 1.00000000000000, 0.19490740458632, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.18422539733319, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.01928905504120, 0.06821595695975, 0.01928907584551, 0.06821597447905, 0.01928907288210, 0.06821597198357, 0.19490740458632, 1.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.75219207123661, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.16423561600251, 0.33888049666781, 0.16423572651156, 0.33888057206442, 0.16423571077042, 0.33888056132477, 0.00000000000000, 0.00000000000000, 1.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.51600103950980, 0.00000000000000, 0.00000000000000, 0.07647263064518, 0.05361419986134, 0.19204973003640, 0.13464408640903, -0.10831817992477, -0.07594076496696, 0.00000000000000, -0.00000000000000, -0.00000000000000, 1.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.51600103950980, 0.00000000000000, 0.16719762336165, 0.11722058885152, -0.08191873435875, -0.05743238038099, 0.11416803148371, 0.08004203589524, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.51600103950980, 0.14083780862071, 0.09873998521718, -0.10022313392271, -0.07026540626491, -0.16991550459403, -0.11912601751230, 0.18422539733319, 0.75219207123661, 0.00000000000000, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.34643360590047, 0.63204108415451, 0.34643371174377, 0.63204118476463, 0.34643369666723, 0.63204117043352, 0.00000000000000, 0.00000000000000, 0.51600103950980, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.17908706481186, 0.17023253713582, 0.44975055488604, 0.42751366122224, -0.25366432131019, -0.24112247071790, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.51600103950980, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.39155095566527, 0.37219166370769, -0.19184091655024, -0.18235577858799, 0.26736376332902, 0.25414457524554, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.51600103950980, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.32982034941946, 0.31351317829504, -0.23470696931266, -0.22310241682894, -0.39791567013827, -0.37824164244123, 0.01928905504120, 0.16423561600251, 0.07647263064518, 0.16719762336165, 0.14083780862071, 0.34643360590047, 0.17908706481186, 0.39155095566527, 0.32982034941946, 1.00000000000000, 0.64589812339497, 0.01662402371546, 0.15421109407384, 0.01662401727475, 0.15421107236418, 0.06821595695975, 0.33888049666781, 0.05361419986134, 0.11722058885152, 0.09873998521718, 0.63204108415451, 0.17023253713582, 0.37219166370769, 0.31351317829504, 0.64589812339497, 1.00000000000000, 0.15421109407384, 0.41975074651501, 0.15421107236418, 0.41975071066583, 0.01928907584551, 0.16423572651156, 0.19204973003640, -0.08191873435875, -0.10022313392271, 0.34643371174377, 0.44975055488604, -0.19184091655024, -0.23470696931266, 0.01662402371546, 0.15421109407384, 1.00000000000000, 0.64589812339497, 0.01662380750128, 0.15421036527822, 0.06821597447905, 0.33888057206442, 0.13464408640903, -0.05743238038099, -0.07026540626491, 0.63204118476463, 0.42751366122224, -0.18235577858799, -0.22310241682894, 0.15421109407384, 0.41975074651501, 0.64589812339497, 1.00000000000000, 0.15421036527822, 0.41974954305334, 0.01928907288210, 0.16423571077042, -0.10831817992477, 0.11416803148371, -0.16991550459403, 0.34643369666723, -0.25366432131019, 0.26736376332902, -0.39791567013827, 0.01662401727475, 0.15421107236418, 0.01662380750128, 0.15421036527822, 1.00000000000000, 0.64589812339497, 0.06821597198357, 0.33888056132477, -0.07594076496696, 0.08004203589524, -0.11912601751230, 0.63204117043352, -0.24112247071790, 0.25414457524554, -0.37824164244123, 0.15421107236418, 0.41975071066583, 0.15421036527822, 0.41974954305334, 0.64589812339497, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP: " << S << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP NORM: " << S.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP: " << Sexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP NORM: " << Sexp.norm() << std::endl;

    // return success or failure based on the error
    return (S - Sexp).norm() > 1e-8;
}
