#include "../include/integral.h"

int test_int_nuclear_ammonia_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/ammonia.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -47.72349087734394, -5.79432332717729, -0.01052626879443, -0.01310472715120, 0.00849575212938, -1.40619059904086, -1.40619125066027, -1.40619115693765, -5.79432332717729, -8.37196440008919, -0.12191620873895, -0.15178015633221, 0.09839856823775, -3.34617510015805, -3.34617590081467, -3.34617574804474, -0.01052626879443, -0.12191620873895, -8.31822431703521, 0.03575177911596, -0.02317790109175, -0.93549264475610, -2.29387824800903, 1.23636735893345, -0.01310472715120, -0.15178015633221, 0.03575177911596, -8.30243227601812, -0.02885516169738, -2.01078114414136, 0.91710186227302, -1.38751998781181, 0.00849575212938, 0.09839856823775, -0.02317790109175, -0.02885516169738, -8.32823400788118, -1.62565352656923, 1.20755335940227, 2.02665286570914, -1.40619059904086, -3.34617510015805, -0.93549264475610, -2.01078114414136, -1.62565352656923, -5.36532376431880, -1.24855019078757, -1.24855004472375, -1.40619125066027, -3.34617590081467, -2.29387824800903, 0.91710186227302, 1.20755335940227, -1.24855019078757, -5.36532383581303, -1.24854582380724, -1.40619115693765, -3.34617574804474, 1.23636735893345, -1.38751998781181, 2.02665286570914, -1.24855004472375, -1.24854582380724, -5.36532373724488;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
