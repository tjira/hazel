#include "../include/integral.h"

int test_int_nuclear_methane_631g(int, char**) {
    // initialize the system
    System system("../example/molecule/methane.xyz", "6-31G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -36.10721352681358, -2.84101196180833, 0.00000013619332, 0.00000012845340, 0.00000023698942, -3.61301761275620, 0.00000002287969, 0.00000002157940, 0.00000003981273, -0.61425367887109, -1.80397275219543, -0.61425304883774, -1.80397226173638, -0.61425231615337, -1.80397169011973, -0.61425199508573, -1.80397143891088, -2.84101196180833, -7.66946103145104, 0.00000097307797, 0.00000091486729, 0.00000167990979, -5.69800464222077, 0.00000066429618, 0.00000061990833, 0.00000112552477, -1.83282504472110, -3.24508273637197, -1.83282440102642, -3.24508253935048, -1.83282333386448, -3.24508193566786, -1.83282268172154, -3.24508145420972, 0.00000013619332, 0.00000097307797, -8.18745338116100, 0.00000008512492, -0.00000065838466, 0.00000092946718, -3.45422733871630, 0.00000007749442, -0.00000053952172, -1.14567457384379, -0.76772569168917, -0.44445650900712, -0.29783356958139, -0.72475355437589, -0.48566328640662, 2.31489940077608, 1.55123525859204, 0.00000012845340, 0.00000091486729, 0.00000008512492, -8.18745298131446, 0.00000018880131, 0.00000086886386, 0.00000007749442, -3.45422698928336, 0.00000015435469, -0.34890103799584, -0.23380102471463, -1.78525124313068, -1.19631159304012, 2.01785469181572, 1.35218251891291, 0.11631155992961, 0.07794179552639, 0.00000023698942, 0.00000167990979, -0.00000065838466, 0.00000018880131, -8.18745441963152, 0.00000158169643, -0.00000053952172, 0.00000015435469, -3.45422817818109, -2.02763813222099, -1.35873659180883, 1.47001795650916, 0.98507236544467, 0.97396430485510, 0.65266278605635, -0.41631822787933, -0.27897777920872, -3.61301761275620, -5.69800464222077, 0.00000092946718, 0.00000086886386, 0.00000158169643, -5.70602894887172, 0.00000111465098, 0.00000102673599, 0.00000182698848, -2.11900850611077, -3.68437794837257, -2.11900839655208, -3.68437823944887, -2.11900783270497, -3.68437793527692, -2.11900733286927, -3.68437742979438, 0.00000002287969, 0.00000066429618, -3.45422733871630, 0.00000007749442, -0.00000053952172, 0.00000111465098, -4.18245081307617, 0.00000013598056, -0.00000080688445, -1.24767212381812, -1.12310701263108, -0.48402597746428, -0.43570124980784, -0.78927789926423, -0.71047773957215, 2.52099375520199, 2.26930472085193, 0.00000002157940, 0.00000061990833, 0.00000007749442, -3.45422698928336, 0.00000015435469, 0.00000102673599, 0.00000013598056, -4.18245023396618, 0.00000022990907, -0.37996314777148, -0.34202789600671, -1.94419010226017, -1.75008613517008, 2.19750292589597, 1.97811004200303, 0.12666670275945, 0.11402110080979, 0.00000003981273, 0.00000112552477, -0.00000053952172, 0.00000015435469, -3.45422817818109, 0.00000182698848, -0.00000080688445, 0.00000022990907, -4.18245203863342, -2.20815546773828, -1.98769773674836, 1.60089190151864, 1.44106371956853, 1.06067565693377, 0.95478134473582, -0.45338287813382, -0.40811724561999, -0.61425367887109, -1.83282504472110, -1.14567457384379, -0.34890103799584, -2.02763813222099, -2.11900850611077, -1.24767212381812, -0.37996314777148, -2.20815546773828, -5.48052682719269, -3.24673589254533, -0.12845024484230, -0.85916922232305, -0.12845219407226, -0.85917456488491, -0.12845141301320, -0.85917245100613, -1.80397275219543, -3.24508273637197, -0.76772569168917, -0.23380102471463, -1.35873659180883, -3.68437794837257, -1.12310701263108, -0.34202789600671, -1.98769773674836, -3.24673589254533, -4.16986672818418, -0.85916931398345, -2.03033780979964, -0.85917463187559, -2.03034479070254, -0.85917243116620, -2.03034194359997, -0.61425304883774, -1.83282440102642, -0.44445650900712, -1.78525124313068, 1.47001795650916, -2.11900839655208, -0.48402597746428, -1.94419010226017, 1.60089190151864, -0.12845024484230, -0.85916931398345, -5.48052776267246, -3.24673653421771, -0.12845401634981, -0.85917964634155, -0.12845384828342, -0.85917920314263, -1.80397226173638, -3.24508253935048, -0.29783356958139, -1.19631159304012, 0.98507236544467, -3.68437823944887, -0.43570124980784, -1.75008613517008, 1.44106371956853, -0.85916922232305, -2.03033780979964, -3.24673653421771, -4.16986783182804, -0.85917962167118, -2.03035151380486, -0.85917909164141, -2.03035082903284, -0.61425231615337, -1.83282333386448, -0.72475355437589, 2.01785469181572, 0.97396430485510, -2.11900783270497, -0.78927789926423, 2.19750292589597, 1.06067565693377, -0.12845219407226, -0.85917463187559, -0.12845401634981, -0.85917962167118, -5.48052775646689, -3.24673655980372, -0.12845378462015, -0.85917903499915, -1.80397169011973, -3.24508193566786, -0.48566328640662, 1.35218251891291, 0.65266278605635, -3.68437793527692, -0.71047773957215, 1.97811004200303, 0.95478134473582, -0.85917456488491, -2.03034479070254, -0.85917964634155, -2.03035151380486, -3.24673655980372, -4.16986808693732, -0.85917894816831, -2.03035070946051, -0.61425199508573, -1.83282268172154, 2.31489940077608, 0.11631155992961, -0.41631822787933, -2.11900733286927, 2.52099375520199, 0.12666670275945, -0.45338287813382, -0.12845141301320, -0.85917243116620, -0.12845384828342, -0.85917909164141, -0.12845378462015, -0.85917894816831, -5.48052712012097, -3.24673615367576, -1.80397143891088, -3.24508145420972, 1.55123525859204, 0.07794179552639, -0.27897777920872, -3.68437742979438, 2.26930472085193, 0.11402110080979, -0.40811724561999, -0.85917245100613, -2.03034194359997, -0.85917920314263, -2.03035082903284, -0.85917903499915, -2.03035070946051, -3.24673615367576, -4.16986760317953;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
