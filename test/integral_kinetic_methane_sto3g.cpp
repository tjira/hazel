#include "../include/integral.h"

int test_integral_kinetic_methane_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/methane.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 15.89112181239595, -0.08588999412233, -0.00000000000000, -0.00000000000000, -0.00000000000000, -0.01026948466740, -0.01026949349165, -0.01026950352105, -0.01026950778130, -0.08588999412233, 0.47224999256911, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.10915741528793, 0.10915733869446, 0.10915725164032, 0.10915721466165, -0.00000000000000, 0.00000000000000, 1.47772809059759, -0.00000000000000, -0.00000000000000, 0.12916409812307, 0.05010832093314, 0.08170916385089, -0.26098312779002, -0.00000000000000, 0.00000000000000, -0.00000000000000, 1.47772809059759, -0.00000000000000, 0.03933534563353, 0.20127033810227, -0.22749413114371, -0.01311302260579, -0.00000000000000, 0.00000000000000, -0.00000000000000, -0.00000000000000, 1.47772809059759, 0.22859724056760, -0.16573069385124, -0.10980529030101, 0.04693599608930, -0.01026948466740, 0.10915741528793, 0.12916409812307, 0.03933534563353, 0.22859724056760, 0.76003187992239, -0.00520240579717, -0.00520226669343, -0.00520232095503, -0.01026949349165, 0.10915733869446, 0.05010832093314, 0.20127033810227, -0.16573069385124, -0.00520240579717, 0.76003187992239, -0.00520213768882, -0.00520214851521, -0.01026950352105, 0.10915725164032, 0.08170916385089, -0.22749413114371, -0.10980529030101, -0.00520226669343, -0.00520213768882, 0.76003187992239, -0.00520215204026, -0.01026950778130, 0.10915721466165, -0.26098312779002, -0.01311302260579, 0.04693599608930, -0.00520232095503, -0.00520214851521, -0.00520215204026, 0.76003187992239;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
