#include "../include/integral.h"

int test_int_kinetic_ethane_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/ethane.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix T = Integral::Kinetic(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Texp(system.shells.nbf(), system.shells.nbf()); Texp << 16.19074006781007, -0.48698724806222, 0.00000000000000, -0.00000000000000, -0.00000000000000, -0.00000003928153, -0.00757446732750, -0.00889326105969, 0.00026597360935, 0.00024695253021, -0.00254796052585, -0.00254796084104, -0.00254796216940, -0.00326827566716, -0.00326827446523, -0.00326826134688, -0.48698724806222, 0.44072788591624, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00757446732750, 0.03212932040970, -0.12791479886818, 0.00382558889438, 0.00355200224304, -0.00705415013475, -0.00705413558737, -0.00705407427576, 0.11938735335745, 0.11938736513912, 0.11938749372867, 0.00000000000000, 0.00000000000000, 1.23814483672461, 0.00000000000000, 0.00000000000000, 0.00889326105969, 0.12791479886818, -0.22083781723943, 0.00899428977345, 0.00835106393602, 0.02099038302283, 0.02079551243684, 0.02024592807535, -0.08818956761497, -0.07678961484493, -0.09222614415096, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.23814483672461, -0.00000000000000, -0.00026597360935, -0.00382558889438, 0.00899428977345, 0.07963192333470, -0.00024975794617, -0.00029080530505, 0.00868002470538, -0.01024454479844, -0.19022613845596, 0.20208349169586, -0.00416500854144, -0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 1.23814483672461, -0.00024695253021, -0.00355200224304, 0.00835106393602, -0.00024975794617, 0.07966902191344, 0.01035223229853, -0.00632898056945, -0.00574588915527, 0.12162576242852, 0.10964412754375, -0.22412784565400, -0.00000003928153, -0.00757446732750, 0.00889326105969, -0.00026597360935, -0.00024695253021, 16.19074006781007, -0.48698724806222, -0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00326827965431, -0.00326827649119, -0.00326824812535, -0.00254796126543, -0.00254796088172, -0.00254796138821, -0.00757446732750, 0.03212932040970, 0.12791479886818, -0.00382558889438, -0.00355200224304, -0.48698724806222, 0.44072788591624, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.11938731427420, 0.11938734528002, 0.11938762332891, -0.00705411599996, -0.00705413371007, -0.00705411033287, -0.00889326105969, -0.12791479886818, -0.22083781723943, 0.00899428977345, 0.00835106393602, -0.00000000000000, 0.00000000000000, 1.23814483672461, 0.00000000000000, -0.00000000000000, 0.09222825510507, 0.08818738696633, 0.07678973687882, -0.02079569469592, -0.02024570207259, -0.02099043283603, 0.00026597360935, 0.00382558889438, 0.00899428977345, 0.07963192333470, -0.00024975794617, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.23814483672461, 0.00000000000000, 0.00422695607211, 0.19019337439025, -0.20211328288736, -0.00868163685634, 0.01024301426647, 0.00029379612280, 0.00024695253021, 0.00355200224304, 0.00835106393602, -0.00024975794617, 0.07966902191344, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.00000000000000, 1.23814483672461, 0.22412555919306, -0.12167855022820, -0.10958987585755, 0.00632645725893, 0.00574845338238, -0.01035240373676, -0.00254796052585, -0.00705415013475, 0.02099038302283, -0.00029080530505, 0.01035223229853, -0.00326827965431, 0.11938731427420, 0.09222825510507, 0.00422695607211, 0.22412555919306, 0.49698730092503, 0.01484849826882, 0.01484852358552, -0.01015379772926, -0.01015255808953, -0.00899522075095, -0.00254796084104, -0.00705413558737, 0.02079551243684, 0.00868002470538, -0.00632898056945, -0.00326827649119, 0.11938734528002, 0.08818738696633, 0.19019337439025, -0.12167855022820, 0.01484849826882, 0.49698730092503, 0.01484857095847, -0.00899522173562, -0.01015380231152, -0.01015254313526, -0.00254796216940, -0.00705407427576, 0.02024592807535, -0.01024454479844, -0.00574588915527, -0.00326824812535, 0.11938762332891, 0.07678973687882, -0.20211328288736, -0.10958987585755, 0.01484852358552, 0.01484857095847, 0.49698730092503, -0.01015252989672, -0.00899523402371, -0.01015377461684, -0.00326827566716, 0.11938735335745, -0.08818956761497, -0.19022613845596, 0.12162576242852, -0.00254796126543, -0.00705411599996, -0.02079569469592, -0.00868163685634, 0.00632645725893, -0.01015379772926, -0.00899522173562, -0.01015252989672, 0.49698730092503, 0.01484851218041, 0.01484849002195, -0.00326827446523, 0.11938736513912, -0.07678961484493, 0.20208349169586, 0.10964412754375, -0.00254796088172, -0.00705413371007, -0.02024570207259, 0.01024301426647, 0.00574845338238, -0.01015255808953, -0.01015380231152, -0.00899523402371, 0.01484851218041, 0.49698730092503, 0.01484854968996, -0.00326826134688, 0.11938749372867, -0.09222614415096, -0.00416500854144, -0.22412784565400, -0.00254796138821, -0.00705411033287, -0.02099043283603, 0.00029379612280, -0.01035240373676, -0.00899522075095, -0.01015254313526, -0.01015377461684, 0.01484849002195, 0.01484854968996, 0.49698730092503;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED KINETIC: " << T << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED KINETIC NORM: " << T.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED KINETIC: " << Texp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED KINETIC NORM: " << Texp.norm() << std::endl;

    // return success or failure based on the error
    return (T - Texp).norm() > 1e-8;
}
