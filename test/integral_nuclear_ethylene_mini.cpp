#include "../include/integral.h"

int test_integral_nuclear_ethylene_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/ethylene.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << -37.94981943003242, -3.75147040722905, -0.04808012389657, -0.00066764232279, -0.01272958469517, -0.00000150530634, -1.04659548709810, 1.91585118810208, 0.02657980592953, 0.50747474328271, -1.52456361643249, -1.52455978489526, -0.22537093481580, -0.22536563490626, -3.75147040722905, -8.62989728249684, -0.70807269270638, -0.00983127974963, -0.18747908596265, -1.04659549726737, -4.10633188949126, 4.28386072010017, 0.05943055841819, 1.13474390473062, -4.26701366907523, -4.26700059286178, -1.36809716983411, -1.36807692614657, -0.04808012389657, -0.70807269270638, -8.81634400621205, 0.00086742142309, -0.17671961787191, -1.91585135612173, -4.28387379854288, 2.26695517254668, 0.06932618285129, 1.27355469104451, 1.31408822762190, 1.60379716283335, -1.66136894031734, -1.59298172793124, -0.00066764232279, -0.00983127974963, 0.00086742142309, -8.33969964727950, -0.03067320198343, -0.02657986799929, -0.05943507929431, 0.06933061649744, -2.58940755363711, 0.01034635777796, 2.80977258451856, -2.76942480374110, 0.63594401194064, -0.68111542624477, -0.01272958469517, -0.18747908596265, -0.17671961787191, -0.03067320198343, -8.19444916478583, -0.50747418736206, -1.13469451105317, 1.27350021811507, 0.01034442764708, -2.20319581815275, 0.78771532455101, -0.01352444109740, -0.33628205883862, -0.52542868949081, -0.00000150530634, -1.04659549726737, -1.91585135612173, -0.02657986799929, -0.50747418736206, -37.94981972484432, -3.75147046399389, 0.04807713499186, 0.00066633267560, 0.01274072659849, -0.22537285837975, -0.22536533243344, -1.52455947770115, -1.52456335823041, -1.04659548709810, -4.10633188949126, -4.28387379854288, -0.05943507929431, -1.13469451105317, -3.75147046399389, -8.62989759511756, 0.70803436965307, 0.00981464896207, 0.18762203340590, -1.36810475813136, -1.36807542036964, -4.26700578240825, -4.26700694795767, 1.91585118810208, 4.28386072010017, 2.26695517254668, 0.06933061649744, 1.27350021811507, 0.04807713499186, 0.70803436965307, -8.81636367470569, 0.00085828254372, -0.17668639779554, 1.59292415677962, 1.66127845733600, -1.60406107231446, -1.31447693971732, 0.02657980592953, 0.05943055841819, 0.06932618285129, -2.58940755363711, 0.01034442764708, 0.00066633267560, 0.00981464896207, 0.00085828254372, -8.33969961594492, -0.03067503067064, 0.68109813963341, -0.63596732467222, 2.76927614294523, -2.80991264378257, 0.50747474328271, 1.13474390473062, 1.27355469104451, 0.01034635777796, -2.20319581815275, 0.01274072659849, 0.18762203340590, -0.17668639779554, -0.03067503067064, -8.19443048179023, 0.52572226932109, 0.33656626038237, 0.01474873947443, -0.78652338691438, -1.52456361643249, -4.26701366907523, 1.31408822762190, 2.80977258451856, 0.78771532455101, -0.22537285837975, -1.36810475813136, 1.59292415677962, 0.68109813963341, 0.52572226932109, -5.97356317111727, -1.69296058126646, -0.69710195954920, -0.30482361760247, -1.52455978489526, -4.26700059286178, 1.60379716283335, -2.76942480374110, -0.01352444109740, -0.22536533243344, -1.36807542036964, 1.66127845733600, -0.63596732467222, 0.33656626038237, -1.69296058126646, -5.97354587979078, -0.30482138383643, -0.69706011751336, -0.22537093481580, -1.36809716983411, -1.66136894031734, 0.63594401194064, -0.33628205883862, -1.52455947770115, -4.26700578240825, -1.60406107231446, 2.76927614294523, 0.01474873947443, -0.69710195954920, -0.30482138383643, -5.97355758236135, -1.69296555452668, -0.22536563490626, -1.36807692614657, -1.59298172793124, -0.68111542624477, -0.52542868949081, -1.52456335823041, -4.26700694795767, -1.31447693971732, -2.80991264378257, -0.78652338691438, -0.30482361760247, -0.69706011751336, -1.69296555452668, -5.97354960930267;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
