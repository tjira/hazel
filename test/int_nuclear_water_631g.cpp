#include "../include/integral.h"

int test_int_nuclear_water_631g(int, char**) {
    // initialize the system
    System system("../example/molecule/water.xyz", "6-31G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -62.55089151305392, -5.17381526318127, -0.02362660844608, -0.00818531992164, -0.00944968693583, -5.49733846914846, -0.00325570439474, -0.00112792244820, -0.00130214996181, -0.96522242250009, -2.16096963942792, -0.96521570192472, -2.16096574949510, -5.17381526318127, -11.60063670115483, -0.16084613529901, -0.05572434136776, -0.06433194136088, -7.84446630757583, -0.10369738082441, -0.03592546530106, -0.04147474637218, -2.15098223209886, -3.61205963483215, -2.15097105965871, -3.61205373217492, -0.02362660844608, -0.16084613529901, -12.70649947735247, -0.00258042096741, -0.02604446736896, -0.15277789148369, -4.30932599931437, -0.00240249573412, -0.02424834991993, -1.64157342481444, -0.92957757283930, -1.01828317246575, -0.59883463624806, -0.00818531992164, -0.05572434136776, -0.00258042096741, -12.73684055510595, 0.02293645750952, -0.05292916882668, -0.00240249573412, -4.33757469923098, 0.02135468351697, 1.15821118374787, 0.59433474920633, -2.07970369361967, -1.12384839716832, -0.00944968693583, -0.06433194136088, -0.02604446736896, 0.02293645750952, -12.67256017287372, -0.06110496177916, -0.02424834991993, 0.02135468351697, -4.27772725195728, -1.15508547067890, -0.63633119360333, 0.09125008572557, 0.02502902220534, -5.49733846914846, -7.84446630757583, -0.15277789148369, -0.05292916882668, -0.06110496177916, -7.64761238060573, -0.22302394807257, -0.07726582283723, -0.08920046561539, -2.87283274249483, -4.41771876105441, -2.87282376339514, -4.41771296491345, -0.00325570439474, -0.10369738082441, -4.30932599931437, -0.00240249573412, -0.02424834991993, -0.22302394807257, -5.35543935935863, -0.00583186671613, -0.05885878572933, -2.45581726448258, -1.78191546750052, -1.52145881595374, -1.14628226301400, -0.00112792244820, -0.03592546530106, -0.00240249573412, -4.33757469923098, 0.02135468351697, -0.07726582283723, -0.00583186671613, -5.42400867244711, 0.05183492834965, 1.73799704645614, 1.14380076868244, -3.11590962979468, -2.15826702233689, -0.00130214996181, -0.04147474637218, -0.02424834991993, 0.02135468351697, -4.27772725195728, -0.08920046561539, -0.05885878572933, 0.05183492834965, -5.27873860760021, -1.72955334423892, -1.22109233137843, 0.13880543289841, 0.04993375343181, -0.96522242250009, -2.15098223209886, -1.64157342481444, 1.15821118374787, -1.15508547067890, -2.87283274249483, -2.45581726448258, 1.73799704645614, -1.72955334423892, -6.27313096116240, -3.74384427038999, -0.39369830641728, -1.45518634103685, -2.16096963942792, -3.61205963483215, -0.92957757283930, 0.59433474920633, -0.63633119360333, -4.41771876105441, -1.78191546750052, 1.14380076868244, -1.22109233137843, -3.74384427038999, -4.69136306286849, -1.45518502976856, -2.82583716583917, -0.96521570192472, -2.15097105965871, -1.01828317246575, -2.07970369361967, 0.09125008572557, -2.87282376339514, -1.52145881595374, -3.11590962979468, 0.13880543289841, -0.39369830641728, -1.45518502976856, -6.27312419839383, -3.74384026304667, -2.16096574949510, -3.61205373217492, -0.59883463624806, -1.12384839716832, 0.02502902220534, -4.41771296491345, -1.14628226301400, -2.15826702233689, 0.04993375343181, -1.45518634103685, -2.82583716583917, -3.74384026304667, -4.69135975903299;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
