#include "../include/integral.h"

int test_int_nuclear_ethane_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/ethane.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix V = Integral::Nuclear(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Vexp(system.shells.nbf(), system.shells.nbf()); Vexp << -37.90958485172601, -5.24946872973072, -0.04420041579896, 0.00132192216771, 0.00122740153609, -0.00000068711161, -0.57424552331109, 0.96365010013716, -0.02882019219269, -0.02675911841897, -0.11041369290819, -0.11041387779675, -0.11041465667744, -1.34773250690870, -1.34773263767254, -1.34773413892296, -5.24946872973072, -9.39841615263505, -0.53033191757346, 0.01586088269886, 0.01472671995306, -0.57424552599292, -2.77698845171811, 3.18929508804254, -0.09538317303834, -0.08856184915319, -0.78560036095068, -0.78560130063741, -0.78560531740269, -3.97779843330894, -3.97779839633662, -3.97780134273330, -0.04420041579896, -0.53033191757346, -9.53636354922370, 0.00813630084892, 0.00755433029113, -0.96365010457600, -3.18929508881350, 3.06183377679046, -0.13150735149130, -0.12210261070918, -0.92592930935174, -0.91865727485476, -0.89814730039667, 1.11616574431871, 0.95004093525906, 1.17498795995286, 0.00132192216771, 0.01586088269886, 0.00813630084892, -9.26456179523718, -0.00022586248098, 0.02882019380549, 0.09538334522557, -0.13150754839896, -1.33140016330650, 0.00365175786282, 0.01511894363528, -0.31960137419630, 0.38651268248666, 2.77710793238581, -2.93979087360889, 0.06574743925072, 0.00122740153609, 0.01472671995306, 0.00755433029113, -0.00022586248098, -9.26452839276416, 0.02675912024924, 0.08856202111601, -0.12210280788732, 0.00365175829205, -1.33194258319648, -0.38230103638711, 0.24011165081939, 0.21835335332351, -1.76768895222296, -1.59308778039032, 3.27077545881736, -0.00000068711161, -0.57424552599292, -0.96365010457600, 0.02882019380549, 0.02675912024924, -37.90958496648809, -5.24946875823330, 0.04420041208133, -0.00132186511760, -0.00122732893455, -1.34773204735407, -1.34773241425715, -1.34773566344395, -0.11041412714451, -0.11041390182038, -0.11041419937847, -0.57424552331109, -2.77698845171811, -3.18929508881350, 0.09538334522557, 0.08856202111601, -5.24946875823330, -9.39841624807593, 0.53033188338206, -0.01586036057248, -0.01472605782724, -3.97779715235062, -3.97779804278746, -3.97780449845706, -0.78560253717014, -0.78560140817297, -0.78560298713782, 0.96365010013716, 3.18929508804254, 3.06183377679046, -0.13150754839896, -0.12210280788732, 0.04420041208133, 0.53033188338206, -9.53636368063219, 0.00813597667178, 0.00755416862575, -1.17501939015363, -1.11613406386922, -0.95004185926857, 0.91866277363071, 0.89814255983154, 0.92592857223352, -0.02882019219269, -0.09538317303834, -0.13150735149130, -1.33140016330650, 0.00365175829205, -0.00132186511760, -0.01586036057248, 0.00813597667178, -9.26456196772970, -0.00022604644556, -0.06665047857568, -2.77663001483520, 2.94022450112632, 0.31966137035527, -0.38645728117769, -0.01523124637643, -0.02675911841897, -0.08856184915319, -0.12210261070918, 0.00365175786282, -1.33194258319648, -0.00122732893455, -0.01472605782724, 0.00755416862575, -0.00022604644556, -9.26452837662123, -3.27074260592906, 1.76845863510743, 1.59229658257781, -0.24001634218530, -0.21845086269538, 0.38230604829774, -0.11041369290819, -0.78560036095068, -0.92592930935174, 0.01511894363528, -0.38230103638711, -1.34773204735407, -3.97779715235062, -1.17501939015363, -0.06665047857568, -3.27074260592906, -6.73924070462746, -1.27393861100649, -1.27393986576077, -0.33761849984366, -0.33772611266724, -0.13209263771766, -0.11041387779675, -0.78560130063741, -0.91865727485476, -0.31960137419630, 0.24011165081939, -1.34773241425715, -3.97779804278746, -1.11613406386922, -2.77663001483520, 1.76845863510743, -1.27393861100649, -6.73924166492015, -1.27394118574330, -0.13209267440016, -0.33761809363435, -0.33772758459154, -0.11041465667744, -0.78560531740269, -0.89814730039667, 0.38651268248666, 0.21835335332351, -1.34773566344395, -3.97780449845706, -0.95004185926857, 2.94022450112632, 1.59229658257781, -1.27393986576077, -1.27394118574330, -6.73924658838183, -0.33772894469727, -0.13209317559762, -0.33762087672792, -1.34773250690870, -3.97779843330894, 1.11616574431871, 2.77710793238581, -1.76768895222296, -0.11041412714451, -0.78560253717014, 0.91866277363071, 0.31966137035527, -0.24001634218530, -0.33761849984366, -0.13209267440016, -0.33772894469727, -6.73924238721801, -1.27393917378687, -1.27393888229565, -1.34773263767254, -3.97779839633662, 0.95004093525906, -2.93979087360889, -1.59308778039032, -0.11041390182038, -0.78560140817297, 0.89814255983154, -0.38645728117769, -0.21845086269538, -0.33772611266724, -0.33761809363435, -0.13209317559762, -1.27393917378687, -6.73924177886880, -1.27394034312792, -1.34773413892296, -3.97780134273330, 1.17498795995286, 0.06574743925072, 3.27077545881736, -0.11041419937847, -0.78560298713782, 0.92592857223352, -0.01523124637643, 0.38230604829774, -0.13209263771766, -0.33772758459154, -0.33762087672792, -1.27393888229565, -1.27394034312792, -6.73924398054481;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR: " << V << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED NUCLEAR NORM: " << V.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR: " << Vexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED NUCLEAR NORM: " << Vexp.norm() << std::endl;

    // return success or failure based on the error
    return (V - Vexp).norm() > 1e-8;
}
