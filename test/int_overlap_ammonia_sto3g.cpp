#include "../include/integral.h"

int test_int_overlap_ammonia_sto3g(int, char**) {
    // initialize the system
    System system("../example/molecule/ammonia.xyz", "STO-3G", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix S = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Sexp(system.shells.nbf(), system.shells.nbf()); Sexp << 1.00000000000000, 0.23503776231708, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.05564832820940, 0.05564835374990, 0.05564835011186, 0.23503776231708, 1.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.48219308202861, 0.48219320142964, 0.48219318442191, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.14282877952465, 0.35869327281521, -0.20230699907753, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, -0.00000000000000, 0.31227685359707, -0.15300046985981, 0.21323282810051, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 1.00000000000000, 0.26304433555525, -0.18718778678690, -0.31735296748003, 0.05564832820940, 0.48219308202861, 0.14282877952465, 0.31227685359707, 0.26304433555525, 1.00000000000000, 0.21273342440134, 0.21273339910118, 0.05564835374990, 0.48219320142964, 0.35869327281521, -0.15300046985981, -0.18718778678690, 0.21273342440134, 1.00000000000000, 0.21273257507217, 0.05564835011186, 0.48219318442191, -0.20230699907753, 0.21323282810051, -0.31735296748003, 0.21273339910118, 0.21273257507217, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP: " << S << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP NORM: " << S.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP: " << Sexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP NORM: " << Sexp.norm() << std::endl;

    // return success or failure based on the error
    return (S - Sexp).norm() > 1e-8;
}
