#include "../include/integral.h"

int test_int_overlap_formaldehyde_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/formaldehyde.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix S = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Sexp(system.shells.nbf(), system.shells.nbf()); Sexp << 1.00000000000000, 0.20304660416675, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.00000001910266, 0.03608465930453, -0.06479968548156, -0.00163936734187, -0.00746106806723, 0.00726965693357, 0.00726966689078, 0.20304660416675, 1.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.03457171800301, 0.39298414381426, -0.48951229491897, -0.01238417229606, -0.05636268949448, 0.11316143167795, 0.11316155323419, 0.00000000000000, -0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.07592712490926, 0.35751680920192, -0.24935364429479, -0.01334523426708, -0.06073666267269, 0.10814078767733, 0.12085141514038, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00192088044893, 0.00904481830150, -0.01334523426708, 0.27780916790905, -0.00153657692163, -0.00794544571918, 0.01373874175499, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00874228698623, 0.04116466351359, -0.06073666267269, -0.00153657692163, 0.27115353941417, 0.07076117906045, -0.04439501733190, 0.00000001910266, 0.03457171800301, 0.07592712490926, 0.00192088044893, 0.00874228698623, 1.00000000000000, 0.19254595363088, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.06666508118155, 0.06666508011695, 0.03608465930453, 0.39298414381426, 0.35751680920192, 0.00904481830150, 0.04116466351359, 0.19254595363088, 1.00000000000000, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.57048195758474, 0.57048195297428, -0.06479968548156, -0.48951229491897, -0.24935364429479, -0.01334523426708, -0.06073666267269, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.22440591191510, 0.31561105136644, -0.00163936734187, -0.01238417229606, -0.01334523426708, 0.27780916790905, -0.00153657692163, -0.00000000000000, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, -0.07096734024492, 0.08462929326999, -0.00746106806723, -0.05636268949448, -0.06073666267269, -0.00153657692163, 0.27115353941417, 0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.44424516386751, -0.38206764833246, 0.00726965693357, 0.11316143167795, 0.10814078767733, -0.00794544571918, 0.07076117906045, 0.06666508118155, 0.57048195758474, 0.22440591191510, -0.07096734024492, 0.44424516386751, 1.00000000000000, 0.25002730517745, 0.00726966689078, 0.11316155323419, 0.12085141514038, 0.01373874175499, -0.04439501733190, 0.06666508011695, 0.57048195297428, 0.31561105136644, 0.08462929326999, -0.38206764833246, 0.25002730517745, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP: " << S << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED OVERLAP NORM: " << S.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP: " << Sexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED OVERLAP NORM: " << Sexp.norm() << std::endl;

    // return success or failure based on the error
    return (S - Sexp).norm() > 1e-8;
}
