#include "../include/integral.h"

int test_integral_overlap_ammonia_mini(int, char**) {
    // initialize the system
    System system("../example/molecule/ammonia.xyz", "MINI", 0, 1);

    // calculate the integral
    libint2::initialize();
    Matrix I = Integral::Overlap(system);
    libint2::finalize();

    // create the expectation integral
    Matrix Iexp(system.shells.nbf(), system.shells.nbf()); Iexp << 1.00000000000000, 0.19751664716199, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.05898273107022, 0.05898275258966, 0.05898274952439, 0.19751664716199, 1.00000000000000, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.54505882209809, 0.54505893187828, 0.54505891624097, -0.00000000000000, -0.00000000000000, 1.00000000000000, 0.00000000000000, 0.00000000000000, 0.14561120535732, 0.36568089434304, -0.20624809764516, -0.00000000000000, -0.00000000000000, 0.00000000000000, 1.00000000000000, 0.00000000000000, 0.31836027170990, -0.15598103698495, 0.21738677036267, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.00000000000000, 0.26816866243687, -0.19083434920618, -0.32353525149034, 0.05898273107022, 0.54505882209809, 0.14561120535732, 0.31836027170990, 0.26816866243687, 1.00000000000000, 0.32691098882073, 0.32691095877512, 0.05898275258966, 0.54505893187828, 0.36568089434304, -0.15598103698495, -0.19083434920618, 0.32691098882073, 1.00000000000000, 0.32690998018588, 0.05898274952439, 0.54505891624097, -0.20624809764516, 0.21738677036267, -0.32353525149034, 0.32691095877512, 0.32690998018588, 1.00000000000000;

    // print the results
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL: " << I << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "COMPUTED INTEGRAL NORM: " << I.norm() << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL: " << Iexp << std::endl;
    std::cout << std::fixed << std::setprecision(14) << "EXPECTED INTEGRAL NORM: " << Iexp.norm() << std::endl;

    // return success or failure based on the error
    return (I - Iexp).norm() > 1e-8;
}
